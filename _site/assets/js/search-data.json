{"0": {
    "doc": "Comet 101",
    "title": "Comet 101: Introduction to Running Jobs on Comet Supercomputer",
    "content": "Presented by Mary Thomas (SDSC, mpthomas@ucsd.edu ) . In this tutorial, you will learn how to compile and run jobs on Comet, where to run them, and how to run batch jobs. The commands below can be cut &amp; pasted into the terminal window, which is connected to comet.sdsc.edu. For instructions on how to do this, see the tutorial on how to use a terminal application and SSH go connect to an SDSC HPC system: https://github.com/sdsc-hpc-training/basic_skills/tree/master/connecting_to_hpc_systems. ",
    "url": "http://localhost:4000/dev.io/docs/comet#comet-101-introduction-to-running-jobs-on-comet-supercomputer",
    "relUrl": "/docs/comet#comet-101-introduction-to-running-jobs-on-comet-supercomputer"
  },"1": {
    "doc": "Comet 101",
    "title": "Misc Notes/Updates:",
    "content": ". | You must have a comet account in order to access the system. | To obtain a trial account: http://www.sdsc.edu/support/user_guides/comet.html#trial_accounts | . | You must be familiar with running basic Unix commands: see the following tutorials at: . | https://github.com/sdsc-hpc-training/basic_skills | . | The hostname for Comet is comet.sdsc.edu | The operating system for Comet was changed to CentOS in December, 2019. As a result, you will need to recompile all code, some modules and libraries are no longer needed, and the locations of some libraries and applications have changed. For details, see the transition guide here: . | https://www.sdsc.edu/services/hpc/comet_upgrade.html | . | Our next HPC system, E X P A N S E, will be coming online for early users in September. Keep an eye on the E X P A N S E pages for training information and other updates | . If you have any difficulties completing these tasks, please contact SDSC Consulting group at consult@sdsc.edu. Contents: . | Comet Overview . | Comet Architecture | Comet File Systems | . | Getting Started - Comet System Environment . | Comet Accounts | Logging Onto Comet | Obtaining Example Code | . | Modules: Managing User Environments . | Common module commands | Load and Check Modules and Environment | Module Error: command not found | . | Compiling &amp; Linking . | Supported Compiler Types | Using the Intel Compilers | Using the PGI Compilers | Using the GNU Compilers | . | Running Jobs on Comet . | The SLURM Resource Manager . | Common Slurm Commands | Slurm Partitions | . | Interactive Jobs using SLURM | Batch Jobs using SLURM | Command Line Jobs | . | Hands-on Examples | Compiling and Running GPU/CUDA Jobs . | GPU Hello World (GPU) . | GPU Hello World: Compiling | GPU Hello World: Batch Script Submission | GPU Hello World: Batch Job Output | . | GPU Enumeration . | GPU Enumeration: Compiling | GPU Enumeration: Batch Script Submission | GPU Enumeration: Batch Job Output | . | CUDA Mat-Mult . | Matrix Mult. (GPU): Compiling | Matrix Mult. (GPU): Batch Script Submission | Matrix Mult. (GPU): Batch Job Output | . | . | Compiling and Running CPU Jobs . | Hello World (MPI) . | Hello World (MPI): Source Code | Hello World (MPI): Compiling | Hello World (MPI): Interactive Jobs | Hello World (MPI): Batch Script Submission | Hello World (MPI): Batch Script Output | . | Hello World (OpenMP) . | Hello World (OpenMP): Source Code | Hello World (OpenMP): Compiling | Hello World (OpenMP): Batch Script Submission | Hello World (OpenMP): Batch Script Output | . | Compiling and Running Hybrid (MPI + OpenMP) Jobs . | Hybrid (MPI + OpenMP): Source Code | Hybrid (MPI + OpenMP): Compiling | Hybrid (MPI + OpenMP): Batch Script Submission | Hybrid (MPI + OpenMP): Batch Script Output | . | . | . Back to Top . ",
    "url": "http://localhost:4000/dev.io/docs/comet#misc-notesupdates",
    "relUrl": "/docs/comet#misc-notesupdates"
  },"2": {
    "doc": "Comet 101",
    "title": "Comet 101",
    "content": " ",
    "url": "http://localhost:4000/dev.io/docs/comet",
    "relUrl": "/docs/comet"
  },"3": {
    "doc": "Comet Overview",
    "title": "Comet Overview:",
    "content": "HPC for the “long tail of science:” . | Designed and operated on the principle that the majority of computational research is performed at modest scale: large number jobs that run for less than 48 hours, but can be computationally intensvie and generate large amounts of data. | An NSF-funded system available through the eXtreme Science and Engineering Discovery Environment (XSEDE) program. | Also supports science gateways. | . | 2.76 Pflop/s peak | 48,784 CPU cores | 288 NVIDIA GPUs | 247 TB total memory | 634 TB total flash memory | . Back to Top . Back to Top . | Lustre filesystems – Good for scalable large block I/O | Accessible from all compute and GPU nodes. | /oasis/scratch/comet - 2.5PB, peak performance: 100GB/s. Good location for storing large scale scratch data during a job. | /oasis/projects/nsf - 2.5PB, peak performance: 100 GB/s. Long term storage. | Not good for lots of small files or small block I/O. | SSD filesystems | /scratch local to each native compute node – 210GB on regular compute nodes, 285GB on GPU, large memory nodes, 1.4TB on selected compute nodes. | SSD location is good for writing small files and temporary scratch files. Purged at the end of a job. | Home directories (/home/$USER) | Source trees, binaries, and small input files. | Not good for large scale I/O. | . Back to Top . ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/Comet%20Overview/#comet-overview",
    "relUrl": "/docs/comet-101/Comet%20Overview/#comet-overview"
  },"4": {
    "doc": "Comet Overview",
    "title": "Comet Overview",
    "content": " ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/Comet%20Overview/",
    "relUrl": "/docs/comet-101/Comet%20Overview/"
  },"5": {
    "doc": "Compiling & Linking",
    "title": "Compiling &amp; Linking",
    "content": "Comet provides the Intel, Portland Group (PGI), and GNU compilers along with multiple MPI implementations (MVAPICH2, MPICH2, OpenMPI). Most applications will achieve the best performance on Comet using the Intel compilers and MVAPICH2 and the majority of libraries installed on Comet have been built using this combination. Other compilers and versions can be installed by Comet staff on request. For more information, see the user guide: http://www.sdsc.edu/support/user_guides/comet.html#compiling . Supported Compiler Types . Comet compute nodes support several parallel programming models: . | MPI: Default: Intel | Default Intel Compiler: intel/2018.1.163; Other versions available. | Other options: openmpi_ib/1.8.4 (and 1.10.2), Intel MPI, mvapich2_ib/2.1 | mvapich2_gdr: GPU direct enabled version | OpenMP: All compilers (GNU, Intel, PGI) have OpenMP flags. | GPU nodes: support CUDA, OpenACC. | Hybrid modes are possible. | . In this tutorial, we include several hands-on examples that cover many of the cases in the table: . | MPI | OpenMP | HYBRID | GPU | Local scratch | . Default/Suggested Compilers to used based on programming model and languages: . |   | Serial | MPI | OpenMP | MPI+OpenMP | . | Fortran | ifort | mpif90 | ifort -openmp | mpif90 -openmp | . | C | icc | mpicc | icc -openmp | mpicc -openmp | . | C++ | icpc | mpicxx | icpc -openmp | mpicxx -openmp | . Back to Top . Using the Intel Compilers: . The Intel compilers and the MVAPICH2 MPI implementation will be loaded by default. If you have modified your environment, you can reload by executing the following commands at the Linux prompt or placing in your startup file (~/.cshrc or ~/.bashrc) or into a module load script (see above). module purge module load intel mvapich2_ib . For AVX2 support, compile with the -xHOST option. Note that -xHOST alone does not enable aggressive optimization, so compilation with -O3 is also suggested. The -fast flag invokes -xHOST, but should be avoided since it also turns on interprocedural optimization (-ipo), which may cause problems in some instances. Intel MKL libraries are available as part of the “intel” modules on Comet. Once this module is loaded, the environment variable MKL_ROOT points to the location of the mkl libraries. The MKL link advisor can be used to ascertain the link line (change the MKL_ROOT aspect appropriately). In the example below, we are working with the HPC examples that can be found in . [user@comet-14-01:~/comet-examples/comet101/MKL] pwd /home/user/comet-examples/comet101/MKL [user@comet-14-01:~/comet-examples/comet101/MKL] ls -al total 25991 drwxr-xr-x 2 user use300 9 Nov 25 17:20 . drwxr-xr-x 16 user use300 16 Aug 5 19:02 .. -rw-r--r-- 1 user use300 325 Aug 5 19:02 compile.txt -rw-r--r-- 1 user use300 6380 Aug 5 19:02 pdpttr.c -rwxr-xr-x 1 user use300 44825440 Nov 25 16:55 pdpttr.exe -rw-r--r-- 1 user use300 188 Nov 25 16:57 scalapack.20294236.comet-07-27.out -rw-r--r-- 1 user use300 376 Aug 5 19:02 scalapack.sb . The file compile.txt contains the full command to compile the pdpttr.c program statically linking 64 bit scalapack libraries on Comet: . [user@comet-14-01:~/comet-examples/comet101/MKL] cat compile.txt mpicc -o pdpttr.exe pdpttr.c /opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/mkl/lib/intel64/libmkl_scalapack_lp64.a -Wl,--start-group /opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/mkl/lib/intel64/libmkl_intel_lp64.a /opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/mkl/lib/intel64/libmkl_sequential.a /opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/mkl/lib/intel64/libmkl_core.a /opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/mkl/lib/intel64/libmkl_blacs_intelmpi_lp64.a -Wl,--end-group -lpthread -lm -ldl . Run the command: . [user@comet-14-01:~/comet-examples/comet101/MKL] mpicc -o pdpttr.exe pdpttr.c -I$MKL_ROOT/include ${MKL_ROOT}/lib/intel64/libmkl_scalapack_lp64.a -Wl,--start-group ${MKL_ROOT}/lib/intel64/libmkl_intel_lp64.a ${MKL_ROOT}/lib/intel64/libmkl_core.a ${MKL_ROOT}/lib/intel64/libmkl_sequential.a -Wl,--end-group ${MKL_ROOT}/lib/intel64/libmkl_blacs_intelmpi_lp64.a -lpthread -lm . For more information on the Intel compilers run: [ifort | icc | icpc] -help . Back to Top . Using the PGI Compilers . The PGI compilers can be loaded by executing the following commands at the Linux prompt or placing in your startup file (~/.cshrc or ~/.bashrc) . module purge module load pgi mvapich2_ib . For AVX support, compile with -fast . | For more information on the PGI compilers: man [pgf90 | pgcc | pgCC] | . |   | Serial | MPI | OpenMP | MPI+OpenMP | . | pgf90 | mpif90 | pgf90 -mp | mpif90 -mp |   | . | C | pgcc | mpicc | pgcc -mp | mpicc -mp | . | C++ | pgCC | mpicxx | pgCC -mp | mpicxx -mp | . Back to Top . Using the GNU Compilers . The GNU compilers can be loaded by executing the following commands at the Linux prompt or placing in your startup files (~/.cshrc or ~/.bashrc) . module purge module load gnu openmpi_ib . For AVX support, compile with -mavx. Note that AVX support is only available in version 4.7 or later, so it is necessary to explicitly load the gnu/4.9.2 module until such time that it becomes the default. | For more information on the GNU compilers: man [gfortran | gcc | g++] | . |   | Serial | MPI | OpenMP | MPI+OpenMP | . | Fortran | gfortran | mpif90 | gfortran -fopenmp | mpif90 -fopenmp | . | C | gcc | mpicc | gcc -fopenmp | mpicc -fopenmp | . | C++ | g++ | mpicxx | g++ -fopenmp | mpicxx -fopenmp | . Back to Top . ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/Compiling/#compiling--linking",
    "relUrl": "/docs/comet-101/Compiling/#compiling--linking"
  },"6": {
    "doc": "Compiling & Linking",
    "title": "Compiling & Linking",
    "content": " ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/Compiling/",
    "relUrl": "/docs/comet-101/Compiling/"
  },"7": {
    "doc": "Compiling & Linking",
    "title": "Compiling &amp; Linking",
    "content": "Expanse provides the Intel, Portland Group (PGI), and GNU compilers along with multiple MPI implementations (MVAPICH2, MPICH2, OpenMPI). Most applications will achieve the best performance on Expanse using the Intel compilers and MVAPICH2 and the majority of libraries installed on Expanse have been built using this combination. Other compilers and versions can be installed by Expanse staff on request. For more information, see the user guide: http://www.sdsc.edu/support/user_guides/expanse.html#compiling . Supported Compiler Types . Expanse compute nodes support several parallel programming models: . | MPI: Default: Intel | Default Intel Compiler: intel/2018.1.163; Other versions available. | Other options: openmpi_ib/1.8.4 (and 1.10.2), Intel MPI, mvapich2_ib/2.1 | mvapich2_gdr: GPU direct enabled version | OpenMP: All compilers (GNU, Intel, PGI) have OpenMP flags. | GPU nodes: support CUDA, OpenACC. | Hybrid modes are possible. | . In this tutorial, we include several hands-on examples that cover many of the cases in the table: . | MPI | OpenMP | HYBRID | GPU | Local scratch | . Default/Suggested Compilers to used based on programming model and languages: . |   | Serial | MPI | OpenMP | MPI+OpenMP | . | Fortran | ifort | mpif90 | ifort -openmp | mpif90 -openmp | . | C | icc | mpicc | icc -openmp | mpicc -openmp | . | C++ | icpc | mpicxx | icpc -openmp | mpicxx -openmp | . Back to Top . Using the Intel Compilers: . The Intel compilers and the MVAPICH2 MPI implementation will be loaded by default. If you have modified your environment, you can reload by executing the following commands at the Linux prompt or placing in your startup file (~/.cshrc or ~/.bashrc) or into a module load script (see above). module purge module load intel mvapich2_ib . For AVX2 support, compile with the -xHOST option. Note that -xHOST alone does not enable aggressive optimization, so compilation with -O3 is also suggested. The -fast flag invokes -xHOST, but should be avoided since it also turns on interprocedural optimization (-ipo), which may cause problems in some instances. Intel MKL libraries are available as part of the “intel” modules on Expanse. Once this module is loaded, the environment variable MKL_ROOT points to the location of the mkl libraries. The MKL link advisor can be used to ascertain the link line (change the MKL_ROOT aspect appropriately). In the example below, we are working with the HPC examples that can be found in . [user@expanse-14-01:~/expanse-examples/expanse101/MKL] pwd /home/user/expanse-examples/expanse101/MKL [user@expanse-14-01:~/expanse-examples/expanse101/MKL] ls -al total 25991 drwxr-xr-x 2 user use300 9 Nov 25 17:20 . drwxr-xr-x 16 user use300 16 Aug 5 19:02 .. -rw-r--r-- 1 user use300 325 Aug 5 19:02 compile.txt -rw-r--r-- 1 user use300 6380 Aug 5 19:02 pdpttr.c -rwxr-xr-x 1 user use300 44825440 Nov 25 16:55 pdpttr.exe -rw-r--r-- 1 user use300 188 Nov 25 16:57 scalapack.20294236.expanse-07-27.out -rw-r--r-- 1 user use300 376 Aug 5 19:02 scalapack.sb . The file compile.txt contains the full command to compile the pdpttr.c program statically linking 64 bit scalapack libraries on Expanse: . [user@expanse-14-01:~/expanse-examples/expanse101/MKL] cat compile.txt mpicc -o pdpttr.exe pdpttr.c /opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/mkl/lib/intel64/libmkl_scalapack_lp64.a -Wl,--start-group /opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/mkl/lib/intel64/libmkl_intel_lp64.a /opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/mkl/lib/intel64/libmkl_sequential.a /opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/mkl/lib/intel64/libmkl_core.a /opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/mkl/lib/intel64/libmkl_blacs_intelmpi_lp64.a -Wl,--end-group -lpthread -lm -ldl . Run the command: . [user@expanse-14-01:~/expanse-examples/expanse101/MKL] mpicc -o pdpttr.exe pdpttr.c -I$MKL_ROOT/include ${MKL_ROOT}/lib/intel64/libmkl_scalapack_lp64.a -Wl,--start-group ${MKL_ROOT}/lib/intel64/libmkl_intel_lp64.a ${MKL_ROOT}/lib/intel64/libmkl_core.a ${MKL_ROOT}/lib/intel64/libmkl_sequential.a -Wl,--end-group ${MKL_ROOT}/lib/intel64/libmkl_blacs_intelmpi_lp64.a -lpthread -lm . For more information on the Intel compilers run: [ifort | icc | icpc] -help . Back to Top . Using the PGI Compilers . The PGI compilers can be loaded by executing the following commands at the Linux prompt or placing in your startup file (~/.cshrc or ~/.bashrc) . module purge module load pgi mvapich2_ib . For AVX support, compile with -fast . | For more information on the PGI compilers: man [pgf90 | pgcc | pgCC] | . |   | Serial | MPI | OpenMP | MPI+OpenMP | . | pgf90 | mpif90 | pgf90 -mp | mpif90 -mp |   | . | C | pgcc | mpicc | pgcc -mp | mpicc -mp | . | C++ | pgCC | mpicxx | pgCC -mp | mpicxx -mp | . Back to Top . Using the GNU Compilers . The GNU compilers can be loaded by executing the following commands at the Linux prompt or placing in your startup files (~/.cshrc or ~/.bashrc) . module purge module load gnu openmpi_ib . For AVX support, compile with -mavx. Note that AVX support is only available in version 4.7 or later, so it is necessary to explicitly load the gnu/4.9.2 module until such time that it becomes the default. | For more information on the GNU compilers: man [gfortran | gcc | g++] | . |   | Serial | MPI | OpenMP | MPI+OpenMP | . | Fortran | gfortran | mpif90 | gfortran -fopenmp | mpif90 -fopenmp | . | C | gcc | mpicc | gcc -fopenmp | mpicc -fopenmp | . | C++ | g++ | mpicxx | g++ -fopenmp | mpicxx -fopenmp | . Back to Top . ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/Compiling/#compiling--linking",
    "relUrl": "/docs/expanse-101/Compiling/#compiling--linking"
  },"8": {
    "doc": "Compiling & Linking",
    "title": "Compiling & Linking",
    "content": " ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/Compiling/",
    "relUrl": "/docs/expanse-101/Compiling/"
  },"9": {
    "doc": "Customizing Your User Environment",
    "title": "Modules: Customizing Your User Environment",
    "content": "The Environment Modules package provides for dynamic modification of your shell environment. Module commands set, change, or delete environment variables, typically in support of a particular application. They also let the user choose between different versions of the same software or different combinations of related codes. See: http://www.sdsc.edu/support/user_guides/expanse.html#modules . Common module commands . Here are some common module commands and their descriptions: . | Command | Description | . | module list | List the modules that are currently loaded | . | module avail | List the modules that are available | . | module display | Show the environment variables used by and how they are affected | . | module show | Same as display | . | module unload | Remove from the environment | . | module load | Load into the environment | . | module swap | Replace with in the environment | . A few module commands: . | Default environment: list, li [mthomas@expanse-ln3:~] module list Currently Loaded Modulefiles: 1) intel/2018.1.163 2) mvapich2_ib/2.3.2 . | List available modules: available, avail, av | . $ module av [mthomas@expanse-ln3:~] module av ------------------------- /opt/modulefiles/mpi/.intel -------------------------- mvapich2_gdr/2.3.2(default) [snip] ------------------------ /opt/modulefiles/applications ------------------------- abaqus/6.11.2 lapack/3.8.0(default) abaqus/6.14.1(default) mafft/7.427(default) abinit/8.10.2(default) matlab/2019b(default) abyss/2.2.3(default) matt/1.00(default) amber/18(default) migrate/3.6.11(default) . eos/3.7.1(default) spark/1.2.0 globus/6.0 spark/1.5.2(default) . Back to Top . Load and Check Modules and Environment . | Load modules: ``` [mthomas@expanse-ln3:~] module list Currently Loaded Modulefiles: 1) intel/2018.1.163 2) mvapich2_ib/2.3.2 [mthomas@expanse-ln3:~] module add spark/1.2.0 [mthomas@expanse-ln3:~] module list Currently Loaded Modulefiles: 1) intel/2018.1.163 3) hadoop/2.6.0 2) mvapich2_ib/2.3.2 4) spark/1.2.0 | . Show loaded module details: . $ module show fftw/3.3.4 [mthomas@expanse-ln3:~] module show spark/1.2.0 ——————————————————————- /opt/modulefiles/applications/spark/1.2.0: . module-whatis Spark module-whatis Version: 1.2.0 module load hadoop/2.6.0 prepend-path PATH /opt/spark/1.2.0/bin setenv SPARK_HOME /opt/spark/1.2.0 ——————————————————————- . Once you have loaded the modules, you can check the system variables that are available for you to use. * To see all variable, run the &lt;b&gt;`env`&lt;/b&gt; command. Typically, you will see more than 60 lines containing information such as your login name, shell, your home directory: . [mthomas@expanse-ln3 IBRUN]$ env SPARK_HOME=/opt/spark/1.2.0 HOSTNAME=expanse-ln3.sdsc.edu INTEL_LICENSE_FILE=/opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/licenses:/opt/intel/licenses:/root/intel/licenses SHELL=/bin/bash USER=mthomas PATH=/opt/spark/1.2.0/bin:/opt/hadoop/2.6.0/sbin:/opt/hadoop/contrib/myHadoop/bin:/opt/hadoop/2.6.0/bin:/home/mthomas/miniconda3/bin:/home/mthomas/miniconda3/condabin:/opt/mvapich2/intel/ib/bin:/opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/bin/intel64:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/sdsc/bin:/opt/sdsc/sbin:/opt/ibutils/bin:/opt/pdsh/bin:/opt/rocks/bin:/opt/rocks/sbin:/home/mthomas/bin PWD=/home/mthomas LOADEDMODULES=intel/2018.1.163:mvapich2_ib/2.3.2:hadoop/2.6.0:spark/1.2.0 JUPYTER_CONFIG_DIR=/home/mthomas/.jupyter MPIHOME=/opt/mvapich2/intel/ib MODULESHOME=/usr/share/Modules MKL_ROOT=/opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/mkl . To see the value for any of these variables, use the `echo` command: . [mthomas@expanse-ln3 IBRUN]$ echo $PATH PATH=/opt/gnu/gcc/bin:/opt/gnu/bin:/opt/mvapich2/intel/ib/bin:/opt/intel/composer_xe_2013_sp1.2.144/bin/intel64:/opt/intel/composer_xe_2013_sp1.2.144/mpirt/bin/intel64:/opt/intel/composer_xe_2013_sp1.2.144/debugger/gdb/intel64_mic/bin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/ibutils/bin:/usr/java/latest/bin:/opt/pdsh/bin:/opt/rocks/bin:/opt/rocks/sbin:/opt/sdsc/bin:/opt/sdsc/sbin:/home/username/bin . [Back to Top](#top) &lt;hr&gt; ### &lt;a name=\"module-error\"&gt;&lt;/a&gt;Troubleshooting:Module Error Sometimes this error is encountered when switching from one shell to another or attempting to run the module command from within a shell script or batch job. The module command may not be inherited between the shells. To keep this from happening, execute the following command: . [expanse-ln3:~]source /etc/profile.d/modules.sh ``` OR add this command to your shell script (including Slurm batch scripts) . Back to Top . ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/Customizing/#modules-customizing-your-user-environment",
    "relUrl": "/docs/expanse-101/Customizing/#modules-customizing-your-user-environment"
  },"10": {
    "doc": "Customizing Your User Environment",
    "title": "Customizing Your User Environment",
    "content": " ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/Customizing/",
    "relUrl": "/docs/expanse-101/Customizing/"
  },"11": {
    "doc": "Customizing Your User Environment",
    "title": "Modules: Customizing Your User Environment",
    "content": "The Environment Modules package provides for dynamic modification of your shell environment. Module commands set, change, or delete environment variables, typically in support of a particular application. They also let the user choose between different versions of the same software or different combinations of related codes. See: http://www.sdsc.edu/support/user_guides/comet.html#modules . Common module commands . Here are some common module commands and their descriptions: . | Command | Description | . | module list | List the modules that are currently loaded | . | module avail | List the modules that are available | . | module display | Show the environment variables used by and how they are affected | . | module show | Same as display | . | module unload | Remove from the environment | . | module load | Load into the environment | . | module swap | Replace with in the environment | . A few module commands: . | Default environment: list, li [mthomas@comet-ln3:~] module list Currently Loaded Modulefiles: 1) intel/2018.1.163 2) mvapich2_ib/2.3.2 . | List available modules: available, avail, av | . $ module av [mthomas@comet-ln3:~] module av ------------------------- /opt/modulefiles/mpi/.intel -------------------------- mvapich2_gdr/2.3.2(default) [snip] ------------------------ /opt/modulefiles/applications ------------------------- abaqus/6.11.2 lapack/3.8.0(default) abaqus/6.14.1(default) mafft/7.427(default) abinit/8.10.2(default) matlab/2019b(default) abyss/2.2.3(default) matt/1.00(default) amber/18(default) migrate/3.6.11(default) . eos/3.7.1(default) spark/1.2.0 globus/6.0 spark/1.5.2(default) . Back to Top . Load and Check Modules and Environment . | Load modules: ``` [mthomas@comet-ln3:~] module list Currently Loaded Modulefiles: 1) intel/2018.1.163 2) mvapich2_ib/2.3.2 [mthomas@comet-ln3:~] module add spark/1.2.0 [mthomas@comet-ln3:~] module list Currently Loaded Modulefiles: 1) intel/2018.1.163 3) hadoop/2.6.0 2) mvapich2_ib/2.3.2 4) spark/1.2.0 | . Show loaded module details: . $ module show fftw/3.3.4 [mthomas@comet-ln3:~] module show spark/1.2.0 ——————————————————————- /opt/modulefiles/applications/spark/1.2.0: . module-whatis Spark module-whatis Version: 1.2.0 module load hadoop/2.6.0 prepend-path PATH /opt/spark/1.2.0/bin setenv SPARK_HOME /opt/spark/1.2.0 ——————————————————————- . Once you have loaded the modules, you can check the system variables that are available for you to use. * To see all variable, run the &lt;b&gt;`env`&lt;/b&gt; command. Typically, you will see more than 60 lines containing information such as your login name, shell, your home directory: . [mthomas@comet-ln3 IBRUN]$ env SPARK_HOME=/opt/spark/1.2.0 HOSTNAME=comet-ln3.sdsc.edu INTEL_LICENSE_FILE=/opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/licenses:/opt/intel/licenses:/root/intel/licenses SHELL=/bin/bash USER=mthomas PATH=/opt/spark/1.2.0/bin:/opt/hadoop/2.6.0/sbin:/opt/hadoop/contrib/myHadoop/bin:/opt/hadoop/2.6.0/bin:/home/mthomas/miniconda3/bin:/home/mthomas/miniconda3/condabin:/opt/mvapich2/intel/ib/bin:/opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/bin/intel64:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/sdsc/bin:/opt/sdsc/sbin:/opt/ibutils/bin:/opt/pdsh/bin:/opt/rocks/bin:/opt/rocks/sbin:/home/mthomas/bin PWD=/home/mthomas LOADEDMODULES=intel/2018.1.163:mvapich2_ib/2.3.2:hadoop/2.6.0:spark/1.2.0 JUPYTER_CONFIG_DIR=/home/mthomas/.jupyter MPIHOME=/opt/mvapich2/intel/ib MODULESHOME=/usr/share/Modules MKL_ROOT=/opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/mkl . To see the value for any of these variables, use the `echo` command: . [mthomas@comet-ln3 IBRUN]$ echo $PATH PATH=/opt/gnu/gcc/bin:/opt/gnu/bin:/opt/mvapich2/intel/ib/bin:/opt/intel/composer_xe_2013_sp1.2.144/bin/intel64:/opt/intel/composer_xe_2013_sp1.2.144/mpirt/bin/intel64:/opt/intel/composer_xe_2013_sp1.2.144/debugger/gdb/intel64_mic/bin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/ibutils/bin:/usr/java/latest/bin:/opt/pdsh/bin:/opt/rocks/bin:/opt/rocks/sbin:/opt/sdsc/bin:/opt/sdsc/sbin:/home/username/bin . [Back to Top](#top) &lt;hr&gt; ### &lt;a name=\"module-error\"&gt;&lt;/a&gt;Troubleshooting:Module Error Sometimes this error is encountered when switching from one shell to another or attempting to run the module command from within a shell script or batch job. The module command may not be inherited between the shells. To keep this from happening, execute the following command: . [comet-ln3:~]source /etc/profile.d/modules.sh ``` OR add this command to your shell script (including Slurm batch scripts) . Back to Top . ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/Customizing/#modules-customizing-your-user-environment",
    "relUrl": "/docs/comet-101/Customizing/#modules-customizing-your-user-environment"
  },"12": {
    "doc": "Customizing Your User Environment",
    "title": "Customizing Your User Environment",
    "content": " ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/Customizing/",
    "relUrl": "/docs/comet-101/Customizing/"
  },"13": {
    "doc": "Expanse 101",
    "title": "Expanse 101: Introduction to Running Jobs on Expanse Supercomputer",
    "content": "Presented by Mary Thomas (SDSC, mpthomas@ucsd.edu ) . In this tutorial, you will learn how to compile and run jobs on Expanse, where to run them, and how to run batch jobs. The commands below can be cut &amp; pasted into the terminal window, which is connected to expanse.sdsc.edu. For instructions on how to do this, see the tutorial on how to use a terminal application and SSH go connect to an SDSC HPC system: https://github.com/sdsc-hpc-training-org/basic_skills. ",
    "url": "http://localhost:4000/dev.io/docs/expanse#expanse-101-introduction-to-running-jobs-on-expanse-supercomputer",
    "relUrl": "/docs/expanse#expanse-101-introduction-to-running-jobs-on-expanse-supercomputer"
  },"14": {
    "doc": "Expanse 101",
    "title": "Misc Notes/Updates:",
    "content": ". | You must have a expanse account in order to access the system. | To obtain a trial account: http://www.sdsc.edu/support/user_guides/expanse.html#trial_accounts | You must be familiar with running basic Unix commands: see the following tutorials at: | https://github.com/sdsc-hpc-training/basic_skills | The hostname for Expanse is expanse.sdsc.edu | The operating system for Expanse was changed to CentOS in December, 2019. As a result, you will need to recompile all code, some modules and libraries are no longer needed, and the locations of some libraries and applications have changed. For details, see the transition guide here: | https://www.sdsc.edu/services/hpc/expanse_upgrade.html | Our next HPC system, E X P A N S E, will be coming online for early users in September. Keep an eye on the E X P A N S E pages for training information and other updates | . If you have any difficulties completing these tasks, please contact SDSC Consulting group at consult@sdsc.edu. Contents: . | Expanse Overview | Expanse Architecture | Expanse File Systems . | Getting Started - Expanse System Environment | Expanse Accounts | Logging Onto Expanse | Obtaining Example Code . | Modules: Managing User Environments | Common module commands | Load and Check Modules and Environment | Module Error: command not found . | Compiling &amp; Linking | Supported Compiler Types | Using the Intel Compilers | Using the PGI Compilers | Using the GNU Compilers . | Running Jobs on Expanse | The SLURM Resource Manager | Common Slurm Commands | Slurm Partitions | Interactive Jobs using SLURM | Batch Jobs using SLURM | Command Line Jobs . | Hands-on Examples | Compiling and Running GPU/CUDA Jobs | GPU Hello World (GPU) | GPU Hello World: Compiling | GPU Hello World: Batch Script Submission | GPU Hello World: Batch Job Output | GPU Enumeration | GPU Enumeration: Compiling | GPU Enumeration: Batch Script Submission | GPU Enumeration: Batch Job Output | CUDA Mat-Mult | Matrix Mult. (GPU): Compiling | Matrix Mult. (GPU): Batch Script Submission | Matrix Mult. (GPU): Batch Job Output . | Compiling and Running CPU Jobs | Hello World (MPI) | Hello World (MPI): Source Code | Hello World (MPI): Compiling | Hello World (MPI): Interactive Jobs | Hello World (MPI): Batch Script Submission | Hello World (MPI): Batch Script Output | Hello World (OpenMP) | Hello World (OpenMP): Source Code | Hello World (OpenMP): Compiling | Hello World (OpenMP): Batch Script Submission | Hello World (OpenMP): Batch Script Output | Compiling and Running Hybrid (MPI + OpenMP) Jobs | Hybrid (MPI + OpenMP): Source Code | Hybrid (MPI + OpenMP): Compiling | Hybrid (MPI + OpenMP): Batch Script Submission | Hybrid (MPI + OpenMP): Batch Script Output | . Back to Top . ",
    "url": "http://localhost:4000/dev.io/docs/expanse#misc-notesupdates",
    "relUrl": "/docs/expanse#misc-notesupdates"
  },"15": {
    "doc": "Expanse 101",
    "title": "Expanse 101",
    "content": " ",
    "url": "http://localhost:4000/dev.io/docs/expanse",
    "relUrl": "/docs/expanse"
  },"16": {
    "doc": "Expanse Overview",
    "title": "Expanse Overview:",
    "content": "HPC for the “long tail of science:” . | Designed and operated on the principle that the majority of computational research is performed at modest scale: large number jobs that run for less than 48 hours, but can be computationally intensvie and generate large amounts of data. | An NSF-funded system available through the eXtreme Science and Engineering Discovery Environment (XSEDE) program. | Also supports science gateways. | . | 2.76 Pflop/s peak | 48,784 CPU cores | 288 NVIDIA GPUs | 247 TB total memory | 634 TB total flash memory | . Back to Top . Back to Top . | Lustre filesystems – Good for scalable large block I/O | Accessible from all compute and GPU nodes. | /oasis/scratch/expanse - 2.5PB, peak performance: 100GB/s. Good location for storing large scale scratch data during a job. | /oasis/projects/nsf - 2.5PB, peak performance: 100 GB/s. Long term storage. | Not good for lots of small files or small block I/O. | SSD filesystems | /scratch local to each native compute node – 210GB on regular compute nodes, 285GB on GPU, large memory nodes, 1.4TB on selected compute nodes. | SSD location is good for writing small files and temporary scratch files. Purged at the end of a job. | Home directories (/home/$USER) | Source trees, binaries, and small input files. | Not good for large scale I/O. | . Back to Top . ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/Expanse%20Overview/#expanse-overview",
    "relUrl": "/docs/expanse-101/Expanse%20Overview/#expanse-overview"
  },"17": {
    "doc": "Expanse Overview",
    "title": "Expanse Overview",
    "content": " ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/Expanse%20Overview/",
    "relUrl": "/docs/expanse-101/Expanse%20Overview/"
  },"18": {
    "doc": "Getting Started on Comet",
    "title": "Getting Started on Comet",
    "content": "Comet Accounts . You must have a comet account in order to access the system. | Obtain a trial account here: http://www.sdsc.edu/support/user_guides/comet.html#trial_accounts | You can use your XSEDE account. | . Logging Onto Comet . Details about how to access Comet under different circumstances are described in the Comet User Guide: http://www.sdsc.edu/support/user_guides/comet.html#access . For instructions on how to use SSH, see here . [mthomas@gidget:~] ssh -Y comet.sdsc.edu Password: Last login: Fri Jul 31 14:20:40 2020 from 76.176.117.51 Rocks 7.0 (Manzanita) Profile built 12:32 03-Dec-2019 Kickstarted 13:47 03-Dec-2019 WELCOME TO __________________ __ _______________ -----/ ____/ __ \\/ |/ / ____/_ __/ --/ / / / / / /|_/ / __/ / / / /___/ /_/ / / / / /___ / / \\____/\\____/_/ /_/_____/ /_/ ############################################################################### NOTICE: The Comet login nodes are not to be used for running processing tasks. This includes running Jupyter notebooks and the like. All processing jobs should be submitted as jobs to the batch scheduler. If you don’t know how to do that see the Comet user guide https://www.sdsc.edu/support/user_guides/comet.html#running. Any tasks found running on the login nodes in violation of this policy may be terminated immediately and the responsible user locked out of the system until they contact user services. ############################################################################### (base) [mthomas@comet-ln2:~] . Back to Top . Obtaining Example Code . | Create a test directory hold the comet example files: [comet-ln2 ~]$ mkdir comet-examples [comet-ln2 ~]$ ls -al total 166 drwxr-x--- 8 user user300 24 Jul 17 20:20 . drwxr-xr-x 139 root root 0 Jul 17 20:17 .. -rw-r--r-- 1 user use300 2487 Jun 23 2017 .alias -rw------- 1 user use300 14247 Jul 17 12:11 .bash_history -rw-r--r-- 1 user use300 18 Jun 19 2017 .bash_logout -rw-r--r-- 1 user use300 176 Jun 19 2017 .bash_profile -rw-r--r-- 1 user use300 159 Jul 17 18:24 .bashrc drwxr-xr-x 2 user use300 2 Jul 17 20:20 comet-examples [snip extra lines] [comet-ln2 ~]$ cd comet-examples/ [comet-ln2 comet-examples]$ pwd /home/user/comet-examples [comet-ln2 comet-examples]$ . | Copy the /share/apps/examples/comet101/ directory to your local (/home/username/comet-examples) directory. Note: you can learn to create and modify directories as part of the Getting Started and Basic Skills preparation work: https://github.com/sdsc/sdsc-summer-institute-2020/tree/master/0_preparation [mthomas@comet-ln3 ~]$ ls -al /share/apps/examples/hpc-training/comet-examples/ total 20 (base) [mthomas@comet-ln2:~/comet101] ll /share/apps/examples/hpc-training/comet101/ total 32 drwxr-sr-x 8 mthomas use300 4096 Apr 16 10:39 . drwxrwsr-x 4 mahidhar use300 4096 Apr 15 23:37 .. drwxr-sr-x 5 mthomas use300 4096 Apr 16 03:30 CUDA drwxr-sr-x 2 mthomas use300 4096 Apr 16 10:39 HYBRID drwxr-sr-x 2 mthomas use300 4096 Apr 16 10:39 jupyter_notebooks drwxr-sr-x 2 mthomas use300 4096 Apr 16 16:46 MKL drwxr-sr-x 4 mthomas use300 4096 Apr 16 03:30 MPI drwxr-sr-x 2 mthomas use300 4096 Apr 16 03:31 OPENMP . Copy the ‘comet101’ directory into your comet-examples directory: . [mthomas@comet-ln3 ~]$ [mthomas@comet-ln3 ~]$ cp -r /share/apps/examples/comet101/ comet-examples/ [mthomas@comet-ln3 ~]$ ls -al comet-examples/ total 105 drwxr-xr-x 5 username use300 6 Aug 5 19:02 . drwxr-x--- 10 username use300 27 Aug 5 17:59 .. drwxr-xr-x 16 username use300 16 Aug 5 19:02 comet101 [mthomas@comet-ln3 comet-examples]$ ls -al total 132 total 170 drwxr-xr-x 8 mthomas use300 8 Aug 3 01:19 . drwxr-x--- 64 mthomas use300 98 Aug 3 01:19 .. drwxr-xr-x 5 mthomas use300 5 Aug 3 01:19 CUDA drwxr-xr-x 2 mthomas use300 6 Aug 3 01:19 HYBRID drwxr-xr-x 2 mthomas use300 3 Aug 3 01:19 jupyter_notebooks drwxr-xr-x 2 mthomas use300 6 Aug 3 01:19 MKL drwxr-xr-x 4 mthomas use300 9 Aug 3 01:19 MPI drwxr-xr-x 2 mthomas use300 9 Aug 3 01:19 OPENMP . Most examples will contain source code, along with a batch script example so you can run the example, and compilation examples (e.g. see the MKL example). | . Back to Top . ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/Getting%20Started%20on%20Comet/",
    "relUrl": "/docs/comet-101/Getting%20Started%20on%20Comet/"
  },"19": {
    "doc": "notebooks-101",
    "title": "notebooks-101",
    "content": "Everything you need to know about running Jupyter Notebooks on HPC Systems at SDSC. Read the tutorials here: https://comet-notebooks-101.readthedocs.io/ . ",
    "url": "http://localhost:4000/dev.io/docs/notebooks#notebooks-101",
    "relUrl": "/docs/notebooks#notebooks-101"
  },"20": {
    "doc": "notebooks-101",
    "title": "Interactive Video Link:",
    "content": "This material was presented as part of a webinar presented in April, 2020. The link to the traiing material can be found here: . | https://github.com/sdsc-hpc-training-org/comet-101/blob/master/running_jobs_on_comet.md And the interactive video can be found here: | https://education.sdsc.edu/training/interactive/202005_running_jupyter_notebooks_on_comet/index.php | . ",
    "url": "http://localhost:4000/dev.io/docs/notebooks#interactive-video-link",
    "relUrl": "/docs/notebooks#interactive-video-link"
  },"21": {
    "doc": "notebooks-101",
    "title": "GitHub Repo to training material:",
    "content": "https://github.com/sdsc-hpc-training/basic_skills/tree/master/how_to_run_notebooks_on_comet . ",
    "url": "http://localhost:4000/dev.io/docs/notebooks#github-repo-to-training-material",
    "relUrl": "/docs/notebooks#github-repo-to-training-material"
  },"22": {
    "doc": "notebooks-101",
    "title": "License",
    "content": "All the teaching material in this repository is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License . ",
    "url": "http://localhost:4000/dev.io/docs/notebooks#license",
    "relUrl": "/docs/notebooks#license"
  },"23": {
    "doc": "notebooks-101",
    "title": "notebooks-101",
    "content": ". ",
    "url": "http://localhost:4000/dev.io/docs/notebooks",
    "relUrl": "/docs/notebooks"
  },"24": {
    "doc": "Running Jobs on Comet",
    "title": "Running Jobs on Comet ",
    "content": "Comet manages computational work via the Simple Linux Utility for Resource Management (SLURM) batch environment. Comet places limits on the number of jobs queued and running on a per group (allocation) and partition basis. Submitting a large number of jobs (especially very short ones) can impact the overall scheduler response for all users. If you are anticipating submitting a lot of jobs, contact the SDSC consulting staff before you submit them. We can work to check if there are bundling options that make your workflow more efficient and reduce the impact on the scheduler . For more details, see the section on Running job in the Comet User Guide: http://www.sdsc.edu/support/user_guides/comet.html#running . The Simple Linux Utility for Resource Management (SLURM) . | “Glue” for parallel computer to schedule and execute jobs | Role: Allocate resources within a cluster | Nodes (unique IP address) | Interconnect/switches | Generic resources (e.g. GPUs) | Launch and otherwise manage jobs . | Functionality: | Prioritize queue(s) of jobs; | decide when and where to start jobs; | terminate job when done; | Appropriate resources; | Manage accounts for jobs . | All jobs must be run via the Slurm scheduling infrastructure. There are two types of jobs: | Interactive Jobs | Batch Jobs | . Back to Top . Interactive Jobs: . Interactive HPC systems allow real-time user inputs in order to facilitate code development, real-time data exploration, and visualizations. An interactive job (also referred as interactive session) will provide you with a shell on a compute node in which you can launch your jobs. On Comet, use the srun command: . srun --pty --nodes=1 --ntasks-per-node=24 -p debug -t 00:30:00 --wait 0 /bin/bash . For more information, see the interactive computing tutorial here. Batch Jobs using SLURM: . When you run in the batch mode, you submit jobs to be run on the compute nodes using the sbatch command (described below). Batch scripts are submitted from the login nodes. You can set environment variables in the shell or in the batch script, including: . | Partition (also called the qeueing system) | Time limit for a job (maximum of 48 hours; longer on request) | Number of nodes, tasks per node | Memory requirements (if any) | Job name, output file location | Email info, configuration | . Below is an example of a basic batch script, which shows key features including naming the job/output file, selecting the SLURM queue partition, defining the number of nodes and ocres, and the length of time that the job will need: . [mthomas@comet-ln3 IBRUN]$ cat hellompi-slurm.sb #!/bin/bash #SBATCH --job-name=\"hellompi\" #SBATCH --output=\"hellompi.%j.%N.out\" #SBATCH --partition=compute #SBATCH --nodes=2 #SBATCH --ntasks-per-node=24 #SBATCH --export=ALL #SBATCH -t 00:30:00 #Define user environment source /etc/profile.d/modules.sh module purge module load intel module load mvapich2_ib #This job runs with 2 nodes, 24 cores per node for a total of 48 cores. #ibrun in verbose mode will give binding detail ibrun -v ../hello_mpi . Note that we have included configuring the user environment by purging and then loading the necessary modules. While not required, it is a good habit to develop when building batch scripts. Back to Top . Slurm Partitions . Comet places limits on the number of jobs queued and running on a per group (allocation) and partition basis. Please note that submitting a large number of jobs (especially very short ones) can impact the overall scheduler response for all users. Specified using -p option in batch script. For example: . #SBATCH -p gpu . Back to Top . Slurm Commands: . Here are a few key Slurm commands. For more information, run the man slurm or see this page: . | To Submit jobs using the sbatch command: | . $ sbatch Localscratch-slurm.sb  Submitted batch job 8718049 . | To check job status using the squeue command: $ squeue -u $USER              JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)                         8718049   compute localscr mahidhar PD       0:00      1 (Priority)                                                 * Once the job is running, you will see the job status change:                                                 $ squeue -u $USER                                      JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)                                                 8718064     debug localscr mahidhar  R       0:02      1 comet-14-01                                                                                                 * To cancel a job, use the scancel along with the JOBID:                                                 * $scancel                                                                                                 ### Command Line Jobs                                                 The login nodes are meant for compilation, file editing, simple data analysis, and other tasks that use minimal compute resources. Do not run parallel or large jobs on the login nodes - even for simple tests. Even if you could run a simple test on the command line on the login node, full tests should not be run on the login node because the performance will be adversely impacted by all the other tasks and login activities of the other users who are logged onto the same node. For example, at the moment that this note was written, a `gzip` process was consuming 98% of the CPU time:                                                 ```                                                 [mthomas@comet-ln3 OPENMP]$ top                                                 ...                                                 PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND                                                 19937 XXXXX 20 0 4304 680 300 R 98.2 0.0 0:19.45 gzip                                                 ```                                                                                                 Commands that you type into the terminal and run on the sytem are considered *jobs* and they consume resources. Computationally intensive jobs should be run only on the compute nodes and not the login nodes.                                                                                                 [Back to Top](#top)                                                 &lt;hr&gt; | . ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/Running%20Jobs/#running-jobs-on-comet-",
    "relUrl": "/docs/comet-101/Running%20Jobs/#running-jobs-on-comet-"
  },"25": {
    "doc": "Running Jobs on Comet",
    "title": "Running Jobs on Comet",
    "content": " ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/Running%20Jobs/",
    "relUrl": "/docs/comet-101/Running%20Jobs/"
  },"26": {
    "doc": "About the Team",
    "title": "About the Team",
    "content": "Mary Thomas is a principal leader of the SDSC HPC Training team. James McDougall is the student intern who worked on the Reverse Proxy Service and documentation. Check out his github. Email him if you have questions about using the reverse proxy service or have questions about Jupyter notebooks. Scott Sakai is the security expert and ops/backend for the Reverse Proxy Service. Marty Kandes specializes in Singularity containers including Jupyter Notebook containers. Bob Sinkovits wrote the Python basic skills notebooks. ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/aboutus/",
    "relUrl": "/docs/notebooks-101/aboutus/"
  },"27": {
    "doc": "Contact Us",
    "title": "Contact Us",
    "content": "If you have questions or trouble with the material in this tutorial, see the Comet User Guide, or please contact the following consulting teams: . | XSEDE Help: | &nbsp;&nbsp; | help@xsede.org | &lt;/tr&gt; | Non-XSEDE Help: | &nbsp;&nbsp; | consult@sdsc.edu | &lt;/tr&gt; &lt;/table&gt; &lt;/blockquote&gt; | . | . ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/contactus/",
    "relUrl": "/docs/notebooks-101/contactus/"
  },"28": {
    "doc": "Compiling and Running CPU Jobs",
    "title": "Compiling and Running CPU Jobs: ",
    "content": "Sections: . | Hello World (MPI) | Hello World (OpenMP) | Running Hybrid (MPI + OpenMP) Jobs | . Hello World (MPI) . Subsections: . | Hello World (MPI): Source Code | Hello World (MPI): Compiling | Hello World (MPI): Interactive Jobs | Hello World (MPI): Batch Script Submission | Hello World (MPI): Batch Script Output | . CPU Hello World: Source code: &lt;#hello-world-mpi-source&gt; . Change to the MPI examples directory (assuming you already copied the ): . [mthomas@expanse-ln3 expanse101]$ cd MPI [mthomas@expanse-ln3 MPI]$ ll [mthomas@expanse-ln3:~/expanse101/MPI] ll total 498 drwxr-xr-x 4 mthomas use300 7 Apr 16 01:11 . drwxr-xr-x 6 mthomas use300 6 Apr 15 20:10 .. -rw-r--r-- 1 mthomas use300 336 Apr 15 15:47 hello_mpi.f90 drwxr-xr-x 2 mthomas use300 3 Apr 16 01:02 IBRUN drwxr-xr-x 2 mthomas use300 3 Apr 16 00:57 MPIRUN_RSH `` [mthomas@expanse-ln3 OPENMP]$cat hello_mpi.f90 ! Fortran example program hello include 'mpif.h' integer rank, size, ierror, tag, status(MPI_STATUS_SIZE) call MPI_INIT(ierror) call MPI_COMM_SIZE(MPI_COMM_WORLD, size, ierror) call MPI_COMM_RANK(MPI_COMM_WORLD, rank, ierror) print*, 'node', rank, ': Hello and Welcome to Webinar Participants!' call MPI_FINALIZE(ierror) end . Compile the code: . [mthomas@expanse-ln3 MPI]$ mpif90 -o hello_mpi hello_mpi.f90 [mthomas@expanse-ln3:~/expanse101/MPI] ll total 498 drwxr-xr-x 4 mthomas use300 7 Apr 16 01:11 . drwxr-xr-x 6 mthomas use300 6 Apr 15 20:10 .. -rw-r--r-- 1 mthomas use300 77 Apr 16 01:08 compile.txt -rwxr-xr-x 1 mthomas use300 750288 Apr 16 01:11 hello_mpi -rw-r--r-- 1 mthomas use300 336 Apr 15 15:47 hello_mpi.f90 drwxr-xr-x 2 mthomas use300 3 Apr 16 01:02 IBRUN drwxr-xr-x 2 mthomas use300 3 Apr 16 00:57 MPIRUN_RSH . Note: The two directories that contain batch scripts needed to run the jobs using the parallel/slurm environment. | First, we should verify that the user environment is correct for running the examples we will work with in this tutorial. [mthomas@expanse-ln3 MPI]$ module list Currently Loaded Modulefiles: 1) intel/2018.1.163 2) mvapich2_ib/2.3.2 . | If you have trouble with your modules, you can remove the existing environment (purge) and then reload them. After purging, the PATH variable has fewer path directories available: [mthomas@expanse-ln3:~] module purge [mthomas@expanse-ln3:~] echo $PATH /home/mthomas/miniconda3/bin:/home/mthomas/miniconda3/condabin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/sdsc/bin:/opt/sdsc/sbin:/opt/ibutils/bin:/opt/pdsh/bin:/opt/rocks/bin:/opt/rocks/sbin:/home/mthomas/bin . | Next, you reload the modules that you need: [mthomas@expanse-ln3 ~]$ module load intel [mthomas@expanse-ln3 ~]$ module load mvapich2_ib . | You will see that there are more binaries in the PATH: [mthomas@expanse-ln3:~] echo $PATH /opt/mvapich2/intel/ib/bin:/opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/bin/intel64:/home/mthomas/miniconda3/bin:/home/mthomas/miniconda3/condabin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/sdsc/bin:/opt/sdsc/sbin:/opt/ibutils/bin:/opt/pdsh/bin:/opt/rocks/bin:/opt/rocks/sbin:/home/mthomas/bin . | . Back to CPU Jobs Back to Top . Hello World (MPI): Compiling: . | Compile the MPI hello world code. | For this, we use the command mpif90, which is loaded into your environment when you loaded the intel module above. | To see where the command is located, use the which command: [mthomas@expanse-ln3 MPI]$ which mpif90 /opt/mvapich2/intel/ib/bin/mpif90 . | Compile the code: mpif90 -o hello_mpi hello_mpi.f90 . | Verify that the executable has been created: | . [mthomas@expanse-ln3:~/expanse101/MPI] ll total 498 drwxr-xr-x 4 mthomas use300 7 Apr 16 01:11 . drwxr-xr-x 6 mthomas use300 6 Apr 15 20:10 .. -rwxr-xr-x 1 mthomas use300 750288 Apr 16 01:11 hello_mpi -rw-r--r-- 1 mthomas use300 336 Apr 15 15:47 hello_mpi.f90 drwxr-xr-x 2 mthomas use300 3 Apr 16 01:02 IBRUN drwxr-xr-x 2 mthomas use300 3 Apr 16 00:57 MPIRUN_RSH . | In the next sections, we will see how to run parallel code using two environments: | Running a parallel job on an Interactive compute node | Running parallel code using the batch queue system | . Back to CPU Jobs Back to Top . Hello World (MPI): Interactive Jobs: . | To run MPI (or other executables) from the command line, you need to use the “Interactive” nodes. | To launch the nodes (to get allocated a set of nodes), use the srun command. This example will request one node, all 24 cores, in the debug partition for 30 minutes: [mthomas@expanse-ln3:~/expanse101/MPI] date Thu Apr 16 01:21:48 PDT 2020 [mthomas@expanse-ln3:~/expanse101/MPI] srun --pty --nodes=1 --ntasks-per-node=24 -p debug -t 00:30:00 --wait 0 /bin/bash [mthomas@expanse-14-01:~/expanse101/MPI] date Thu Apr 16 01:22:42 PDT 2020 [mthomas@expanse-14-01:~/expanse101/MPI] hostname expanse-14-01.sdsc.edu . | Note: | You will know when you have an interactive node because the srun command will return and you will be on a different host. | Note: If the cluster is very busy, it may take some time to obtain the nodes. | Once you have the interactive session, your MPI code will be allowed to execute on the command line. [mthomas@expanse-14-01 MPI]$ mpirun -np 4 ./hello_mpi node 0 : Hello and Welcome to Webinar Participants! node 1 : Hello and Welcome to Webinar Participants! node 2 : Hello and Welcome to Webinar Participants! node 3 : Hello and Welcome to Webinar Participants! [mthomas@expanse-14-01 MPI]$ . | . When you are done testing code, exit the Interactive session. Back to CPU Jobs Back to Top . Hello World (MPI): Batch Script Submission: . To submit jobs to the Slurm queuing system, you need to create a slurm batch job script and submit it to the queuing system. | Change directories to the IBRUN directory using the hellompi-slurm.sb batch script: ``` [mthomas@expanse-ln3 MPI]$ cd IBRUN/ [mthomas@expanse-ln3 IBRUN]$ cat hellompi-slurm.sb #!/bin/bash #SBATCH –job-name=”hellompi” #SBATCH –output=”hellompi.%j.%N.out” #SBATCH –partition=compute #SBATCH –nodes=2 #SBATCH –ntasks-per-node=24 #SBATCH –export=ALL #SBATCH -t 00:30:00 | . ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/cpu/#compiling-and-running-cpu-jobs-",
    "relUrl": "/docs/expanse-101/cpu/#compiling-and-running-cpu-jobs-"
  },"29": {
    "doc": "Compiling and Running CPU Jobs",
    "title": "load the user environment",
    "content": "source /etc/profile.d/modules.sh module purge module load intel module load mvapich2_ib . #This job runs with 2 nodes, 24 cores per node for a total of 48 cores. #ibrun in verbose mode will give binding detail . ibrun -v ../hello_mpi . * to run the job, use the command below: . [mthomas@expanse-ln3 IBRUN]$ sbatch hellompi.sb Submitted batch job 32662205 . * In some cases, you may have access to a reservation queue, use the command below: . sbatch –res=SI2018DAY1 hellompi-slurm.sb . [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### Hello World (MPI): Batch Script Output: &lt;a name=\"hello-world-mpi-batch-output\"&gt;&lt;/a&gt; * Check job status using the `squeue` command. [mthomas@expanse-ln3 IBRUN]$ sbatch hellompi-slurm.sb; squeue -u username Submitted batch job 18345138 JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32662205 compute hellompi username PD 0:00 2 (None) …. [mthomas@expanse-ln3 IBRUN]$ squeue -u username JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32662205 compute hellompi username R 0:07 2 expanse-21-[47,57] [mthomas@expanse-ln3 IBRUN]$ squeue -u username JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32662205 compute hellompi username CG 0:08 2 expanse-21-[47,57] . * Note: You will see the `ST` column information change when the job status changes: new jobs go into `SP` (pending); after some time it moves to `R` (running): when completed, the state changes to `CG` (completed) * the JOBID is the job identifer and can be used to track or cancel the job. It is also used as part of the output file name. * Look at the directory for and output file with the job id as part of the name: . [mthomas@expanse-ln3 IBRUN]$ total 48 drwxr-xr-x 2 mthomas use300 4 Apr 16 01:31 . drwxr-xr-x 4 mthomas use300 7 Apr 16 01:11 .. -rw-r–r– 1 mthomas use300 2873 Apr 16 01:31 hellompi.32662205.expanse-20-03.out -rw-r–r– 1 mthomas use300 341 Apr 16 01:30 hellompi-slurm.sb . * To see the contents of the output file, use the `cat` command: . [mthomas@expanse-ln3 IBRUN]$ cat hellompi.32662205.expanse-20-03.out IBRUN: Command is ../hello_mpi IBRUN: Command is /home/username/expanse-examples/expanse101/MPI/hello_mpi IBRUN: no hostfile mod needed IBRUN: Nodefile is /tmp/0p4Nbx12u1 . IBRUN: MPI binding policy: compact/core for 1 threads per rank (12 cores per socket) IBRUN: Adding MV2_USE_OLD_BCAST=1 to the environment IBRUN: Adding MV2_CPU_BINDING_LEVEL=core to the environment IBRUN: Adding MV2_ENABLE_AFFINITY=1 to the environment IBRUN: Adding MV2_DEFAULT_TIME_OUT=23 to the environment IBRUN: Adding MV2_CPU_BINDING_POLICY=bunch to the environment IBRUN: Adding MV2_USE_HUGEPAGES=0 to the environment IBRUN: Adding MV2_HOMOGENEOUS_CLUSTER=0 to the environment IBRUN: Adding MV2_USE_UD_HYBRID=0 to the environment IBRUN: Added 8 new environment variables to the execution environment IBRUN: Command string is [mpirun_rsh -np 48 -hostfile /tmp/0p4Nbx12u1 -export-all /home/username/expanse-examples/expanse101/MPI/hello_mpi] node 18 : Hello and Welcome to Webinar Participants! node 17 : Hello and Welcome to Webinar Participants! node 20 : Hello and Welcome to Webinar Participants! node 21 : Hello and Welcome to Webinar Participants! node 22 : Hello and Welcome to Webinar Participants! node 5 : Hello and Welcome to Webinar Participants! node 3 : Hello and Welcome to Webinar Participants! node 6 : Hello and Welcome to Webinar Participants! node 16 : Hello and Welcome to Webinar Participants! node 19 : Hello and Welcome to Webinar Participants! node 14 : Hello and Welcome to Webinar Participants! node 10 : Hello and Welcome to Webinar Participants! node 13 : Hello and Welcome to Webinar Participants! node 15 : Hello and Welcome to Webinar Participants! node 9 : Hello and Welcome to Webinar Participants! node 12 : Hello and Welcome to Webinar Participants! node 4 : Hello and Welcome to Webinar Participants! node 23 : Hello and Welcome to Webinar Participants! node 7 : Hello and Welcome to Webinar Participants! node 11 : Hello and Welcome to Webinar Participants! node 8 : Hello and Welcome to Webinar Participants! node 1 : Hello and Welcome to Webinar Participants! node 2 : Hello and Welcome to Webinar Participants! node 0 : Hello and Welcome to Webinar Participants! node 39 : Hello and Welcome to Webinar Participants! node 38 : Hello and Welcome to Webinar Participants! node 47 : Hello and Welcome to Webinar Participants! node 45 : Hello and Welcome to Webinar Participants! node 42 : Hello and Welcome to Webinar Participants! node 35 : Hello and Welcome to Webinar Participants! node 28 : Hello and Welcome to Webinar Participants! node 32 : Hello and Welcome to Webinar Participants! node 40 : Hello and Welcome to Webinar Participants! node 44 : Hello and Welcome to Webinar Participants! node 41 : Hello and Welcome to Webinar Participants! node 30 : Hello and Welcome to Webinar Participants! node 31 : Hello and Welcome to Webinar Participants! node 29 : Hello and Welcome to Webinar Participants! node 37 : Hello and Welcome to Webinar Participants! node 43 : Hello and Welcome to Webinar Participants! node 46 : Hello and Welcome to Webinar Participants! node 34 : Hello and Welcome to Webinar Participants! node 26 : Hello and Welcome to Webinar Participants! node 24 : Hello and Welcome to Webinar Participants! node 27 : Hello and Welcome to Webinar Participants! node 25 : Hello and Welcome to Webinar Participants! node 33 : Hello and Welcome to Webinar Participants! node 36 : Hello and Welcome to Webinar Participants! IBRUN: Job ended with value 0 [mthomas@expanse-ln3 IBRUN]$ . * Note the order in which the output was written into the output file. There is an entry for each of the 48 cores (2 nodes, 24 cores/node), but the output is not ordered. This is typical because the time for each core to start and finish its work is asynchronous. [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; ### Hello World (OpenMP): &lt;a name=\"hello-world-omp\"&gt;&lt;/a&gt; &lt;b&gt;Subsections:&lt;/b&gt; * [Hello World (OpenMP): Source Code](#hello-world-omp-source) * [Hello World (OpenMP): Compiling](#hello-world-omp-compile) * [Hello World (OpenMP): Batch Script Submission](#hello-world-omp-batch-submit) * [Hello World (OpenMP): Batch Script Output](#hello-world-omp-batch-output) #### Hello World (OpenMP): Source Code &lt;a name=\"hello-world-omp-source\"&gt;&lt;/a&gt; Change to the OPENMP examples directory: . [mthomas@expanse-ln3 expanse101]$ cd OPENMP/ [mthomas@expanse-ln3 OPENMP]$ ls -al total 479 drwxr-xr-x 2 username use300 6 Aug 5 22:19 . drwxr-xr-x 16 username use300 16 Aug 5 19:02 .. -rwxr-xr-x 1 username use300 728112 Aug 5 19:02 hello_openmp -rw-r–r– 1 username use300 267 Aug 5 22:19 hello_openmp.f90 -rw-r–r– 1 username use300 310 Aug 5 19:02 openmp-slurm.sb -rw-r–r– 1 username use300 347 Aug 5 19:02 openmp-slurm-shared.sb . [mthomas@expanse-ln3 OPENMP]$ cat hello_openmp.f90 PROGRAM OMPHELLO INTEGER TNUMBER INTEGER OMP_GET_THREAD_NUM . !$OMP PARALLEL DEFAULT(PRIVATE) TNUMBER = OMP_GET_THREAD_NUM() PRINT *, ‘Hello from Thread Number[‘,TNUMBER,’] and Welcome Webinar!’ !$OMP END PARALLEL . STOP END . [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### Hello World (OpenMP): Compiling: &lt;a name=\"hello-world-omp-compile\"&gt;&lt;/a&gt; Note that there is already a compiled version of the `hello_openmp.f90` code. You can save or delete this version. * In this example, we compile the source code using the `ifort` command, and verify that it was created: . [mthomas@expanse-ln3 OPENMP]$ ifort -o hello_openmp -qopenmp hello_openmp.f90 [mthomas@expanse-ln3 OPENMP]$ ls -al [mthomas@expanse-ln3:~/expanse101/OPENMP] ll total 77 drwxr-xr-x 2 mthomas use300 7 Apr 16 00:35 . drwxr-xr-x 6 mthomas use300 6 Apr 15 20:10 .. -rwxr-xr-x 1 mthomas use300 816952 Apr 16 00:35 hello_openmp -rw-r–r– 1 mthomas use300 267 Apr 15 15:47 hello_openmp_2.f90 -rw-r–r– 1 mthomas use300 267 Apr 15 15:47 hello_openmp.f90 -rw-r–r– 1 mthomas use300 311 Apr 15 15:47 openmp-slurm.sb -rw-r–r– 1 mthomas use300 347 Apr 15 15:47 openmp-slurm-shared.sb . * Note that if you try to run OpenMP code from the command line, in the current environment, the code will run (because it is based on Pthreads, which exist on the node): . [mthomas@expanse-ln2 OPENMP]$ ./hello_openmp Hello from Thread Number[ 8 ] and Welcome HPC Trainees! Hello from Thread Number[ 3 ] and Welcome HPC Trainees! Hello from Thread Number[ 16 ] and Welcome HPC Trainees! Hello from Thread Number[ 12 ] and Welcome HPC Trainees! Hello from Thread Number[ 9 ] and Welcome HPC Trainees! Hello from Thread Number[ 5 ] and Welcome HPC Trainees! Hello from Thread Number[ 4 ] and Welcome HPC Trainees! Hello from Thread Number[ 14 ] and Welcome HPC Trainees! Hello from Thread Number[ 7 ] and Welcome HPC Trainees! Hello from Thread Number[ 11 ] and Welcome HPC Trainees! Hello from Thread Number[ 13 ] and Welcome HPC Trainees! Hello from Thread Number[ 6 ] and Welcome HPC Trainees! Hello from Thread Number[ 10 ] and Welcome HPC Trainees! Hello from Thread Number[ 19 ] and Welcome HPC Trainees! Hello from Thread Number[ 15 ] and Welcome HPC Trainees! Hello from Thread Number[ 2 ] and Welcome HPC Trainees! Hello from Thread Number[ 18 ] and Welcome HPC Trainees! Hello from Thread Number[ 17 ] and Welcome HPC Trainees! Hello from Thread Number[ 23 ] and Welcome HPC Trainees! Hello from Thread Number[ 20 ] and Welcome HPC Trainees! Hello from Thread Number[ 22 ] and Welcome HPC Trainees! Hello from Thread Number[ 1 ] and Welcome HPC Trainees! Hello from Thread Number[ 0 ] and Welcome HPC Trainees! Hello from Thread Number[ 21 ] and Welcome HPC Trainees! . * In the example below, we used the OpenMP feature to set the number of threads from the command line. [mthomas@expanse-ln3 OPENMP]$ export OMP_NUM_THREADS=4; ./hello_openmp Hello from Thread Number[ 0 ] and Welcome HPC Trainees! Hello from Thread Number[ 1 ] and Welcome HPC Trainees! Hello from Thread Number[ 2 ] and Welcome HPC Trainees! Hello from Thread Number[ 3 ] and Welcome HPC Trainees! . [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### &lt;a name=\"hello-world-omp-batch-submit\"&gt;&lt;/a&gt;Hello World (OpenMP): Batch Script Submission The submit script is openmp-slurm.sb: . [mthomas@expanse-ln2 OPENMP]$ cat openmp-slurm.sb #!/bin/bash #SBATCH –job-name=”hello_openmp” #SBATCH –output=”hello_openmp.%j.%N.out” #SBATCH –partition=compute #SBATCH –nodes=1 #SBATCH –ntasks-per-node=24 #SBATCH –export=ALL #SBATCH -t 01:30:00 . ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/cpu/#load-the-user-environment",
    "relUrl": "/docs/expanse-101/cpu/#load-the-user-environment"
  },"30": {
    "doc": "Compiling and Running CPU Jobs",
    "title": "Define the user environment",
    "content": "source /etc/profile.d/modules.sh module purge module load intel module load mvapich2_ib . #SET the number of openmp threads export OMP_NUM_THREADS=24 . #Run the job using mpirun_rsh ./hello_openmp . * to submit use the sbatch command: . [mthomas@expanse-ln2 OPENMP]$ sbatch openmp-slurm.sb Submitted batch job 32661678 [mthomas@expanse-ln2 OPENMP]$ squeue -u username JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32661678 compute hello_op mthomas PD 0:00 1 (Priority) … . [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### Hello World (OpenMP): Batch Script Output: &lt;a name=\"hello-world-omp-batch-output\"&gt;&lt;/a&gt; * Once the job is finished: . [mthomas@expanse-ln2 OPENMP] cat hello_openmp.32661678.expanse-07-47.out Hello from Thread Number[ 5 ] and Welcome HPC Trainees! Hello from Thread Number[ 7 ] and Welcome HPC Trainees! Hello from Thread Number[ 16 ] and Welcome HPC Trainees! Hello from Thread Number[ 9 ] and Welcome HPC Trainees! Hello from Thread Number[ 18 ] and Welcome HPC Trainees! Hello from Thread Number[ 12 ] and Welcome HPC Trainees! Hello from Thread Number[ 10 ] and Welcome HPC Trainees! Hello from Thread Number[ 0 ] and Welcome HPC Trainees! Hello from Thread Number[ 14 ] and Welcome HPC Trainees! Hello from Thread Number[ 4 ] and Welcome HPC Trainees! Hello from Thread Number[ 3 ] and Welcome HPC Trainees! Hello from Thread Number[ 11 ] and Welcome HPC Trainees! Hello from Thread Number[ 19 ] and Welcome HPC Trainees! Hello from Thread Number[ 22 ] and Welcome HPC Trainees! Hello from Thread Number[ 15 ] and Welcome HPC Trainees! Hello from Thread Number[ 2 ] and Welcome HPC Trainees! Hello from Thread Number[ 6 ] and Welcome HPC Trainees! Hello from Thread Number[ 1 ] and Welcome HPC Trainees! Hello from Thread Number[ 21 ] and Welcome HPC Trainees! Hello from Thread Number[ 20 ] and Welcome HPC Trainees! Hello from Thread Number[ 17 ] and Welcome HPC Trainees! Hello from Thread Number[ 23 ] and Welcome HPC Trainees! Hello from Thread Number[ 13 ] and Welcome HPC Trainees! Hello from Thread Number[ 8 ] and Welcome HPC Trainees! . [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; ### Hybrid (MPI + OpenMP) Jobs: &lt;a name=\"hybrid-mpi-omp\"&gt;&lt;/a&gt; &lt;b&gt;Subsections:&lt;/b&gt; * [Hybrid (MPI + OpenMP): Source Code](#hybrid-mpi-omp-source) * [Hybrid (MPI + OpenMP): Compiling](#hybrid-mpi-omp-compile) * [Hybrid (MPI + OpenMP): Batch Script Submission](#hybrid-mpi-omp-batch-submit) * [Hybrid (MPI + OpenMP): Batch Script Output](#hybrid-mpi-omp-batch-output) ### Hybrid (MPI + OpenMP) Source Code: &lt;a name=\"hybrid-mpi-omp-source\"&gt;&lt;/a&gt; #Several HPC codes use a hybrid MPI, OpenMP approach. * `ibrun` wrapper developed to handle such hybrid use cases. Automatically senses the MPI build (mvapich2, openmpi) and binds tasks correctly. * `ibrun -help` gives detailed usage info. * hello_hybrid.c is a sample code, and hello_hybrid.cmd shows “ibrun” usage. * Change to the HYBRID examples directory: . [mthomas@expanse-ln2 expanse101]$ cd HYBRID/ [mthomas@expanse-ln2 HYBRID]$ ll total 94 drwxr-xr-x 2 username use300 5 Aug 5 19:02 . drwxr-xr-x 16 username use300 16 Aug 5 19:02 .. -rwxr-xr-x 1 username use300 103032 Aug 5 19:02 hello_hybrid -rw-r–r– 1 username use300 636 Aug 5 19:02 hello_hybrid.c -rw-r–r– 1 username use300 390 Aug 5 19:02 hybrid-slurm.sb . * Look at the contents of the `hello_hybrid.c` file . [mthomas@expanse-ln2 HYBRID]$ cat hello_hybrid.c #include #include \"mpi.h\" #include . int main(int argc, char *argv[]) { int numprocs, rank, namelen; char processor_name[MPI_MAX_PROCESSOR_NAME]; int iam = 0, np = 1; . MPI_Init(&amp;argc, &amp;argv); MPI_Comm_size(MPI_COMM_WORLD, &amp;numprocs); MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank); MPI_Get_processor_name(processor_name, &amp;namelen); . #pragma omp parallel default(shared) private(iam, np) { np = omp_get_num_threads(); iam = omp_get_thread_num(); printf(“Hello Webinar participants from thread %d out of %d from process %d out of %d on %s\\n”, iam, np, rank, numprocs, processor_name); } . MPI_Finalize(); } . [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### Hybrid (MPI + OpenMP): Compiling: &lt;a name=\"hybrid-mpi-omp-compile\"&gt;&lt;/a&gt; * To compile the hybrid MPI + OpenMPI code, we need to refer to the table of compilers listed above (and listed in the user guide). * We will use the command `mpicx -openmp` . [mthomas@expanse-ln2 HYBRID]$ mpicc -openmp -o hello_hybrid hello_hybrid.c [mthomas@expanse-ln2 HYBRID]$ ll total 39 drwxr-xr-x 2 username use300 5 Aug 6 00:12 . drwxr-xr-x 16 username use300 16 Aug 5 19:02 .. -rwxr-xr-x 1 username use300 103032 Aug 6 00:12 hello_hybrid -rw-r–r– 1 username use300 636 Aug 5 19:02 hello_hybrid.c -rw-r–r– 1 username use300 390 Aug 5 19:02 hybrid-slurm.sb . [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### Hybrid (MPI + OpenMP): Batch Script Submission: &lt;a name=\"hybrid-mpi-omp-batch-submit\"&gt;&lt;/a&gt; * To submit the hybrid code, we still use the `ibrun` command. * In this example, we set the number of threads explicitly. [mthomas@expanse-ln2 HYBRID]$ cat hybrid-slurm.sb #!/bin/bash #SBATCH –job-name=”hellohybrid” #SBATCH –output=”hellohybrid.%j.%N.out” #SBATCH –partition=compute #SBATCH –nodes=2 #SBATCH –ntasks-per-node=24 #SBATCH –export=ALL #SBATCH -t 01:30:00 . ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/cpu/#define-the-user-environment",
    "relUrl": "/docs/expanse-101/cpu/#define-the-user-environment"
  },"31": {
    "doc": "Compiling and Running CPU Jobs",
    "title": "Define the user environment",
    "content": "source /etc/profile.d/modules.sh module purge module load intel module load mvapich2_ib . #This job runs with 2 nodes, 24 cores per node for a total of 48 cores. ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/cpu/#define-the-user-environment-1",
    "relUrl": "/docs/expanse-101/cpu/#define-the-user-environment-1"
  },"32": {
    "doc": "Compiling and Running CPU Jobs",
    "title": "We use 8 MPI tasks and 6 OpenMP threads per MPI task",
    "content": "export OMP_NUM_THREADS=6 ibrun –npernode 4 ./hello_hybrid . * Submit the job to the Slurm queue, and check the job status . [mthomas@expanse-ln2 HYBRID]$ sbatch hybrid-slurm.sb Submitted batch job 18347079 [mthomas@expanse-ln2 HYBRID]$ squeue -u username JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 18347079 compute hellohyb username R 0:04 2 expanse-01-[01,04] [mthomas@expanse-ln2 HYBRID]$ ll . [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### Hybrid (MPI + OpenMP): Batch Script Output: &lt;a name=\"hybrid-mpi-omp-batch-output\"&gt;&lt;/a&gt; . [mthomas@expanse-ln2 HYBRID]$ ll total 122 drwxr-xr-x 2 username use300 6 Aug 6 00:12 . drwxr-xr-x 16 username use300 16 Aug 5 19:02 .. -rwxr-xr-x 1 username use300 103032 Aug 6 00:12 hello_hybrid -rw-r–r– 1 username use300 3696 Aug 6 00:12 hellohybrid.18347079.expanse-01-01.out -rw-r–r– 1 username use300 636 Aug 5 19:02 hello_hybrid.c -rw-r–r– 1 username use300 390 Aug 5 19:02 hybrid-slurm.sb [mthomas@expanse-ln2 HYBRID]$ cat hellohybrid.18347079.expanse-01-01.out Hello from thread 4 out of 6 from process 3 out of 8 on expanse-01-01.sdsc.edu Hello from thread 3 out of 6 from process 2 out of 8 on expanse-01-01.sdsc.edu Hello from thread 0 out of 6 from process 1 out of 8 on expanse-01-01.sdsc.edu Hello from thread 2 out of 6 from process 2 out of 8 on expanse-01-01.sdsc.edu Hello from thread 1 out of 6 from process 3 out of 8 on expanse-01-01.sdsc.edu Hello from thread 2 out of 6 from process 1 out of 8 on expanse-01-01.sdsc.edu Hello from thread 4 out of 6 from process 2 out of 8 on expanse-01-01.sdsc.edu Hello from thread 0 out of 6 from process 3 out of 8 on expanse-01-01.sdsc.edu Hello from thread 3 out of 6 from process 1 out of 8 on expanse-01-01.sdsc.edu Hello from thread 5 out of 6 from process 2 out of 8 on expanse-01-01.sdsc.edu Hello from thread 3 out of 6 from process 3 out of 8 on expanse-01-01.sdsc.edu Hello from thread 4 out of 6 from process 1 out of 8 on expanse-01-01.sdsc.edu Hello from thread 0 out of 6 from process 2 out of 8 on expanse-01-01.sdsc.edu Hello from thread 2 out of 6 from process 3 out of 8 on expanse-01-01.sdsc.edu Hello from thread 5 out of 6 from process 1 out of 8 on expanse-01-01.sdsc.edu Hello from thread 5 out of 6 from process 3 out of 8 on expanse-01-01.sdsc.edu Hello from thread 3 out of 6 from process 0 out of 8 on expanse-01-01.sdsc.edu Hello from thread 2 out of 6 from process 0 out of 8 on expanse-01-01.sdsc.edu Hello from thread 0 out of 6 from process 0 out of 8 on expanse-01-01.sdsc.edu Hello from thread 4 out of 6 from process 0 out of 8 on expanse-01-01.sdsc.edu Hello from thread 5 out of 6 from process 0 out of 8 on expanse-01-01.sdsc.edu Hello from thread 1 out of 6 from process 2 out of 8 on expanse-01-01.sdsc.edu Hello from thread 1 out of 6 from process 1 out of 8 on expanse-01-01.sdsc.edu Hello from thread 1 out of 6 from process 0 out of 8 on expanse-01-01.sdsc.edu Hello from thread 0 out of 6 from process 7 out of 8 on expanse-01-04.sdsc.edu Hello from thread 0 out of 6 from process 6 out of 8 on expanse-01-04.sdsc.edu Hello from thread 2 out of 6 from process 7 out of 8 on expanse-01-04.sdsc.edu Hello from thread 2 out of 6 from process 6 out of 8 on expanse-01-04.sdsc.edu Hello from thread 3 out of 6 from process 7 out of 8 on expanse-01-04.sdsc.edu Hello from thread 5 out of 6 from process 6 out of 8 on expanse-01-04.sdsc.edu Hello from thread 4 out of 6 from process 6 out of 8 on expanse-01-04.sdsc.edu Hello from thread 1 out of 6 from process 7 out of 8 on expanse-01-04.sdsc.edu Hello from thread 4 out of 6 from process 7 out of 8 on expanse-01-04.sdsc.edu Hello from thread 1 out of 6 from process 6 out of 8 on expanse-01-04.sdsc.edu Hello from thread 0 out of 6 from process 4 out of 8 on expanse-01-04.sdsc.edu Hello from thread 5 out of 6 from process 4 out of 8 on expanse-01-04.sdsc.edu Hello from thread 2 out of 6 from process 4 out of 8 on expanse-01-04.sdsc.edu Hello from thread 1 out of 6 from process 4 out of 8 on expanse-01-04.sdsc.edu Hello from thread 3 out of 6 from process 4 out of 8 on expanse-01-04.sdsc.edu Hello from thread 4 out of 6 from process 4 out of 8 on expanse-01-04.sdsc.edu Hello from thread 0 out of 6 from process 5 out of 8 on expanse-01-04.sdsc.edu Hello from thread 1 out of 6 from process 5 out of 8 on expanse-01-04.sdsc.edu Hello from thread 4 out of 6 from process 5 out of 8 on expanse-01-04.sdsc.edu Hello from thread 2 out of 6 from process 5 out of 8 on expanse-01-04.sdsc.edu Hello from thread 5 out of 6 from process 5 out of 8 on expanse-01-04.sdsc.edu Hello from thread 3 out of 6 from process 6 out of 8 on expanse-01-04.sdsc.edu Hello from thread 5 out of 6 from process 7 out of 8 on expanse-01-04.sdsc.edu Hello from thread 3 out of 6 from process 5 out of 8 on expanse-01-04.sdsc.edu [mthomas@expanse-ln2 HYBRID]$ ``` . Back to CPU Jobs Back to Top . ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/cpu/#we-use-8-mpi-tasks-and-6-openmp-threads-per-mpi-task",
    "relUrl": "/docs/expanse-101/cpu/#we-use-8-mpi-tasks-and-6-openmp-threads-per-mpi-task"
  },"33": {
    "doc": "Compiling and Running CPU Jobs",
    "title": "Compiling and Running CPU Jobs",
    "content": " ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/cpu/",
    "relUrl": "/docs/expanse-101/cpu/"
  },"34": {
    "doc": "Compiling and Running CPU Jobss",
    "title": "Compiling and Running CPU Jobs: ",
    "content": "Sections: . | Hello World (MPI) | Hello World (OpenMP) | Running Hybrid (MPI + OpenMP) Jobs | . Hello World (MPI) . Subsections: . | Hello World (MPI): Source Code | Hello World (MPI): Compiling | Hello World (MPI): Interactive Jobs | Hello World (MPI): Batch Script Submission | Hello World (MPI): Batch Script Output | . CPU Hello World: Source code: &lt;#hello-world-mpi-source&gt; . Change to the MPI examples directory (assuming you already copied the ): . [mthomas@comet-ln3 comet101]$ cd MPI [mthomas@comet-ln3 MPI]$ ll [mthomas@comet-ln3:~/comet101/MPI] ll total 498 drwxr-xr-x 4 mthomas use300 7 Apr 16 01:11 . drwxr-xr-x 6 mthomas use300 6 Apr 15 20:10 .. -rw-r--r-- 1 mthomas use300 336 Apr 15 15:47 hello_mpi.f90 drwxr-xr-x 2 mthomas use300 3 Apr 16 01:02 IBRUN drwxr-xr-x 2 mthomas use300 3 Apr 16 00:57 MPIRUN_RSH `` [mthomas@comet-ln3 OPENMP]$cat hello_mpi.f90 ! Fortran example program hello include 'mpif.h' integer rank, size, ierror, tag, status(MPI_STATUS_SIZE) call MPI_INIT(ierror) call MPI_COMM_SIZE(MPI_COMM_WORLD, size, ierror) call MPI_COMM_RANK(MPI_COMM_WORLD, rank, ierror) print*, 'node', rank, ': Hello and Welcome to Webinar Participants!' call MPI_FINALIZE(ierror) end . Compile the code: . [mthomas@comet-ln3 MPI]$ mpif90 -o hello_mpi hello_mpi.f90 [mthomas@comet-ln3:~/comet101/MPI] ll total 498 drwxr-xr-x 4 mthomas use300 7 Apr 16 01:11 . drwxr-xr-x 6 mthomas use300 6 Apr 15 20:10 .. -rw-r--r-- 1 mthomas use300 77 Apr 16 01:08 compile.txt -rwxr-xr-x 1 mthomas use300 750288 Apr 16 01:11 hello_mpi -rw-r--r-- 1 mthomas use300 336 Apr 15 15:47 hello_mpi.f90 drwxr-xr-x 2 mthomas use300 3 Apr 16 01:02 IBRUN drwxr-xr-x 2 mthomas use300 3 Apr 16 00:57 MPIRUN_RSH . Note: The two directories that contain batch scripts needed to run the jobs using the parallel/slurm environment. | First, we should verify that the user environment is correct for running the examples we will work with in this tutorial. [mthomas@comet-ln3 MPI]$ module list Currently Loaded Modulefiles: 1) intel/2018.1.163 2) mvapich2_ib/2.3.2 . | If you have trouble with your modules, you can remove the existing environment (purge) and then reload them. After purging, the PATH variable has fewer path directories available: [mthomas@comet-ln3:~] module purge [mthomas@comet-ln3:~] echo $PATH /home/mthomas/miniconda3/bin:/home/mthomas/miniconda3/condabin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/sdsc/bin:/opt/sdsc/sbin:/opt/ibutils/bin:/opt/pdsh/bin:/opt/rocks/bin:/opt/rocks/sbin:/home/mthomas/bin . | Next, you reload the modules that you need: [mthomas@comet-ln3 ~]$ module load intel [mthomas@comet-ln3 ~]$ module load mvapich2_ib . | You will see that there are more binaries in the PATH: [mthomas@comet-ln3:~] echo $PATH /opt/mvapich2/intel/ib/bin:/opt/intel/2018.1.163/compilers_and_libraries_2018.1.163/linux/bin/intel64:/home/mthomas/miniconda3/bin:/home/mthomas/miniconda3/condabin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/sdsc/bin:/opt/sdsc/sbin:/opt/ibutils/bin:/opt/pdsh/bin:/opt/rocks/bin:/opt/rocks/sbin:/home/mthomas/bin . | . Back to CPU Jobs Back to Top . Hello World (MPI): Compiling: . | Compile the MPI hello world code. | For this, we use the command mpif90, which is loaded into your environment when you loaded the intel module above. | To see where the command is located, use the which command: [mthomas@comet-ln3 MPI]$ which mpif90 /opt/mvapich2/intel/ib/bin/mpif90 . | Compile the code: mpif90 -o hello_mpi hello_mpi.f90 . | Verify that the executable has been created: | . [mthomas@comet-ln3:~/comet101/MPI] ll total 498 drwxr-xr-x 4 mthomas use300 7 Apr 16 01:11 . drwxr-xr-x 6 mthomas use300 6 Apr 15 20:10 .. -rwxr-xr-x 1 mthomas use300 750288 Apr 16 01:11 hello_mpi -rw-r--r-- 1 mthomas use300 336 Apr 15 15:47 hello_mpi.f90 drwxr-xr-x 2 mthomas use300 3 Apr 16 01:02 IBRUN drwxr-xr-x 2 mthomas use300 3 Apr 16 00:57 MPIRUN_RSH . | In the next sections, we will see how to run parallel code using two environments: | Running a parallel job on an Interactive compute node | Running parallel code using the batch queue system | . Back to CPU Jobs Back to Top . Hello World (MPI): Interactive Jobs: . | To run MPI (or other executables) from the command line, you need to use the “Interactive” nodes. | To launch the nodes (to get allocated a set of nodes), use the srun command. This example will request one node, all 24 cores, in the debug partition for 30 minutes: [mthomas@comet-ln3:~/comet101/MPI] date Thu Apr 16 01:21:48 PDT 2020 [mthomas@comet-ln3:~/comet101/MPI] srun --pty --nodes=1 --ntasks-per-node=24 -p debug -t 00:30:00 --wait 0 /bin/bash [mthomas@comet-14-01:~/comet101/MPI] date Thu Apr 16 01:22:42 PDT 2020 [mthomas@comet-14-01:~/comet101/MPI] hostname comet-14-01.sdsc.edu . | Note: | You will know when you have an interactive node because the srun command will return and you will be on a different host. | Note: If the cluster is very busy, it may take some time to obtain the nodes. | Once you have the interactive session, your MPI code will be allowed to execute on the command line. [mthomas@comet-14-01 MPI]$ mpirun -np 4 ./hello_mpi node 0 : Hello and Welcome to Webinar Participants! node 1 : Hello and Welcome to Webinar Participants! node 2 : Hello and Welcome to Webinar Participants! node 3 : Hello and Welcome to Webinar Participants! [mthomas@comet-14-01 MPI]$ . | . When you are done testing code, exit the Interactive session. Back to CPU Jobs Back to Top . Hello World (MPI): Batch Script Submission: . To submit jobs to the Slurm queuing system, you need to create a slurm batch job script and submit it to the queuing system. | Change directories to the IBRUN directory using the hellompi-slurm.sb batch script: ``` [mthomas@comet-ln3 MPI]$ cd IBRUN/ [mthomas@comet-ln3 IBRUN]$ cat hellompi-slurm.sb #!/bin/bash #SBATCH –job-name=”hellompi” #SBATCH –output=”hellompi.%j.%N.out” #SBATCH –partition=compute #SBATCH –nodes=2 #SBATCH –ntasks-per-node=24 #SBATCH –export=ALL #SBATCH -t 00:30:00 | . ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/cpu/#compiling-and-running-cpu-jobs-",
    "relUrl": "/docs/comet-101/cpu/#compiling-and-running-cpu-jobs-"
  },"35": {
    "doc": "Compiling and Running CPU Jobss",
    "title": "load the user environment",
    "content": "source /etc/profile.d/modules.sh module purge module load intel module load mvapich2_ib . #This job runs with 2 nodes, 24 cores per node for a total of 48 cores. #ibrun in verbose mode will give binding detail . ibrun -v ../hello_mpi . * to run the job, use the command below: . [mthomas@comet-ln3 IBRUN]$ sbatch hellompi.sb Submitted batch job 32662205 . * In some cases, you may have access to a reservation queue, use the command below: . sbatch –res=SI2018DAY1 hellompi-slurm.sb . [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### Hello World (MPI): Batch Script Output: &lt;a name=\"hello-world-mpi-batch-output\"&gt;&lt;/a&gt; * Check job status using the `squeue` command. [mthomas@comet-ln3 IBRUN]$ sbatch hellompi-slurm.sb; squeue -u username Submitted batch job 18345138 JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32662205 compute hellompi username PD 0:00 2 (None) …. [mthomas@comet-ln3 IBRUN]$ squeue -u username JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32662205 compute hellompi username R 0:07 2 comet-21-[47,57] [mthomas@comet-ln3 IBRUN]$ squeue -u username JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32662205 compute hellompi username CG 0:08 2 comet-21-[47,57] . * Note: You will see the `ST` column information change when the job status changes: new jobs go into `SP` (pending); after some time it moves to `R` (running): when completed, the state changes to `CG` (completed) * the JOBID is the job identifer and can be used to track or cancel the job. It is also used as part of the output file name. * Look at the directory for and output file with the job id as part of the name: . [mthomas@comet-ln3 IBRUN]$ total 48 drwxr-xr-x 2 mthomas use300 4 Apr 16 01:31 . drwxr-xr-x 4 mthomas use300 7 Apr 16 01:11 .. -rw-r–r– 1 mthomas use300 2873 Apr 16 01:31 hellompi.32662205.comet-20-03.out -rw-r–r– 1 mthomas use300 341 Apr 16 01:30 hellompi-slurm.sb . * To see the contents of the output file, use the `cat` command: . [mthomas@comet-ln3 IBRUN]$ cat hellompi.32662205.comet-20-03.out IBRUN: Command is ../hello_mpi IBRUN: Command is /home/username/comet-examples/comet101/MPI/hello_mpi IBRUN: no hostfile mod needed IBRUN: Nodefile is /tmp/0p4Nbx12u1 . IBRUN: MPI binding policy: compact/core for 1 threads per rank (12 cores per socket) IBRUN: Adding MV2_USE_OLD_BCAST=1 to the environment IBRUN: Adding MV2_CPU_BINDING_LEVEL=core to the environment IBRUN: Adding MV2_ENABLE_AFFINITY=1 to the environment IBRUN: Adding MV2_DEFAULT_TIME_OUT=23 to the environment IBRUN: Adding MV2_CPU_BINDING_POLICY=bunch to the environment IBRUN: Adding MV2_USE_HUGEPAGES=0 to the environment IBRUN: Adding MV2_HOMOGENEOUS_CLUSTER=0 to the environment IBRUN: Adding MV2_USE_UD_HYBRID=0 to the environment IBRUN: Added 8 new environment variables to the execution environment IBRUN: Command string is [mpirun_rsh -np 48 -hostfile /tmp/0p4Nbx12u1 -export-all /home/username/comet-examples/comet101/MPI/hello_mpi] node 18 : Hello and Welcome to Webinar Participants! node 17 : Hello and Welcome to Webinar Participants! node 20 : Hello and Welcome to Webinar Participants! node 21 : Hello and Welcome to Webinar Participants! node 22 : Hello and Welcome to Webinar Participants! node 5 : Hello and Welcome to Webinar Participants! node 3 : Hello and Welcome to Webinar Participants! node 6 : Hello and Welcome to Webinar Participants! node 16 : Hello and Welcome to Webinar Participants! node 19 : Hello and Welcome to Webinar Participants! node 14 : Hello and Welcome to Webinar Participants! node 10 : Hello and Welcome to Webinar Participants! node 13 : Hello and Welcome to Webinar Participants! node 15 : Hello and Welcome to Webinar Participants! node 9 : Hello and Welcome to Webinar Participants! node 12 : Hello and Welcome to Webinar Participants! node 4 : Hello and Welcome to Webinar Participants! node 23 : Hello and Welcome to Webinar Participants! node 7 : Hello and Welcome to Webinar Participants! node 11 : Hello and Welcome to Webinar Participants! node 8 : Hello and Welcome to Webinar Participants! node 1 : Hello and Welcome to Webinar Participants! node 2 : Hello and Welcome to Webinar Participants! node 0 : Hello and Welcome to Webinar Participants! node 39 : Hello and Welcome to Webinar Participants! node 38 : Hello and Welcome to Webinar Participants! node 47 : Hello and Welcome to Webinar Participants! node 45 : Hello and Welcome to Webinar Participants! node 42 : Hello and Welcome to Webinar Participants! node 35 : Hello and Welcome to Webinar Participants! node 28 : Hello and Welcome to Webinar Participants! node 32 : Hello and Welcome to Webinar Participants! node 40 : Hello and Welcome to Webinar Participants! node 44 : Hello and Welcome to Webinar Participants! node 41 : Hello and Welcome to Webinar Participants! node 30 : Hello and Welcome to Webinar Participants! node 31 : Hello and Welcome to Webinar Participants! node 29 : Hello and Welcome to Webinar Participants! node 37 : Hello and Welcome to Webinar Participants! node 43 : Hello and Welcome to Webinar Participants! node 46 : Hello and Welcome to Webinar Participants! node 34 : Hello and Welcome to Webinar Participants! node 26 : Hello and Welcome to Webinar Participants! node 24 : Hello and Welcome to Webinar Participants! node 27 : Hello and Welcome to Webinar Participants! node 25 : Hello and Welcome to Webinar Participants! node 33 : Hello and Welcome to Webinar Participants! node 36 : Hello and Welcome to Webinar Participants! IBRUN: Job ended with value 0 [mthomas@comet-ln3 IBRUN]$ . * Note the order in which the output was written into the output file. There is an entry for each of the 48 cores (2 nodes, 24 cores/node), but the output is not ordered. This is typical because the time for each core to start and finish its work is asynchronous. [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; ### Hello World (OpenMP): &lt;a name=\"hello-world-omp\"&gt;&lt;/a&gt; &lt;b&gt;Subsections:&lt;/b&gt; * [Hello World (OpenMP): Source Code](#hello-world-omp-source) * [Hello World (OpenMP): Compiling](#hello-world-omp-compile) * [Hello World (OpenMP): Batch Script Submission](#hello-world-omp-batch-submit) * [Hello World (OpenMP): Batch Script Output](#hello-world-omp-batch-output) #### Hello World (OpenMP): Source Code &lt;a name=\"hello-world-omp-source\"&gt;&lt;/a&gt; Change to the OPENMP examples directory: . [mthomas@comet-ln3 comet101]$ cd OPENMP/ [mthomas@comet-ln3 OPENMP]$ ls -al total 479 drwxr-xr-x 2 username use300 6 Aug 5 22:19 . drwxr-xr-x 16 username use300 16 Aug 5 19:02 .. -rwxr-xr-x 1 username use300 728112 Aug 5 19:02 hello_openmp -rw-r–r– 1 username use300 267 Aug 5 22:19 hello_openmp.f90 -rw-r–r– 1 username use300 310 Aug 5 19:02 openmp-slurm.sb -rw-r–r– 1 username use300 347 Aug 5 19:02 openmp-slurm-shared.sb . [mthomas@comet-ln3 OPENMP]$ cat hello_openmp.f90 PROGRAM OMPHELLO INTEGER TNUMBER INTEGER OMP_GET_THREAD_NUM . !$OMP PARALLEL DEFAULT(PRIVATE) TNUMBER = OMP_GET_THREAD_NUM() PRINT *, ‘Hello from Thread Number[‘,TNUMBER,’] and Welcome Webinar!’ !$OMP END PARALLEL . STOP END . [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### Hello World (OpenMP): Compiling: &lt;a name=\"hello-world-omp-compile\"&gt;&lt;/a&gt; Note that there is already a compiled version of the `hello_openmp.f90` code. You can save or delete this version. * In this example, we compile the source code using the `ifort` command, and verify that it was created: . [mthomas@comet-ln3 OPENMP]$ ifort -o hello_openmp -qopenmp hello_openmp.f90 [mthomas@comet-ln3 OPENMP]$ ls -al [mthomas@comet-ln3:~/comet101/OPENMP] ll total 77 drwxr-xr-x 2 mthomas use300 7 Apr 16 00:35 . drwxr-xr-x 6 mthomas use300 6 Apr 15 20:10 .. -rwxr-xr-x 1 mthomas use300 816952 Apr 16 00:35 hello_openmp -rw-r–r– 1 mthomas use300 267 Apr 15 15:47 hello_openmp_2.f90 -rw-r–r– 1 mthomas use300 267 Apr 15 15:47 hello_openmp.f90 -rw-r–r– 1 mthomas use300 311 Apr 15 15:47 openmp-slurm.sb -rw-r–r– 1 mthomas use300 347 Apr 15 15:47 openmp-slurm-shared.sb . * Note that if you try to run OpenMP code from the command line, in the current environment, the code will run (because it is based on Pthreads, which exist on the node): . [mthomas@comet-ln2 OPENMP]$ ./hello_openmp Hello from Thread Number[ 8 ] and Welcome HPC Trainees! Hello from Thread Number[ 3 ] and Welcome HPC Trainees! Hello from Thread Number[ 16 ] and Welcome HPC Trainees! Hello from Thread Number[ 12 ] and Welcome HPC Trainees! Hello from Thread Number[ 9 ] and Welcome HPC Trainees! Hello from Thread Number[ 5 ] and Welcome HPC Trainees! Hello from Thread Number[ 4 ] and Welcome HPC Trainees! Hello from Thread Number[ 14 ] and Welcome HPC Trainees! Hello from Thread Number[ 7 ] and Welcome HPC Trainees! Hello from Thread Number[ 11 ] and Welcome HPC Trainees! Hello from Thread Number[ 13 ] and Welcome HPC Trainees! Hello from Thread Number[ 6 ] and Welcome HPC Trainees! Hello from Thread Number[ 10 ] and Welcome HPC Trainees! Hello from Thread Number[ 19 ] and Welcome HPC Trainees! Hello from Thread Number[ 15 ] and Welcome HPC Trainees! Hello from Thread Number[ 2 ] and Welcome HPC Trainees! Hello from Thread Number[ 18 ] and Welcome HPC Trainees! Hello from Thread Number[ 17 ] and Welcome HPC Trainees! Hello from Thread Number[ 23 ] and Welcome HPC Trainees! Hello from Thread Number[ 20 ] and Welcome HPC Trainees! Hello from Thread Number[ 22 ] and Welcome HPC Trainees! Hello from Thread Number[ 1 ] and Welcome HPC Trainees! Hello from Thread Number[ 0 ] and Welcome HPC Trainees! Hello from Thread Number[ 21 ] and Welcome HPC Trainees! . * In the example below, we used the OpenMP feature to set the number of threads from the command line. [mthomas@comet-ln3 OPENMP]$ export OMP_NUM_THREADS=4; ./hello_openmp Hello from Thread Number[ 0 ] and Welcome HPC Trainees! Hello from Thread Number[ 1 ] and Welcome HPC Trainees! Hello from Thread Number[ 2 ] and Welcome HPC Trainees! Hello from Thread Number[ 3 ] and Welcome HPC Trainees! . [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### &lt;a name=\"hello-world-omp-batch-submit\"&gt;&lt;/a&gt;Hello World (OpenMP): Batch Script Submission The submit script is openmp-slurm.sb: . [mthomas@comet-ln2 OPENMP]$ cat openmp-slurm.sb #!/bin/bash #SBATCH –job-name=”hello_openmp” #SBATCH –output=”hello_openmp.%j.%N.out” #SBATCH –partition=compute #SBATCH –nodes=1 #SBATCH –ntasks-per-node=24 #SBATCH –export=ALL #SBATCH -t 01:30:00 . ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/cpu/#load-the-user-environment",
    "relUrl": "/docs/comet-101/cpu/#load-the-user-environment"
  },"36": {
    "doc": "Compiling and Running CPU Jobss",
    "title": "Define the user environment",
    "content": "source /etc/profile.d/modules.sh module purge module load intel module load mvapich2_ib . #SET the number of openmp threads export OMP_NUM_THREADS=24 . #Run the job using mpirun_rsh ./hello_openmp . * to submit use the sbatch command: . [mthomas@comet-ln2 OPENMP]$ sbatch openmp-slurm.sb Submitted batch job 32661678 [mthomas@comet-ln2 OPENMP]$ squeue -u username JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32661678 compute hello_op mthomas PD 0:00 1 (Priority) … . [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### Hello World (OpenMP): Batch Script Output: &lt;a name=\"hello-world-omp-batch-output\"&gt;&lt;/a&gt; * Once the job is finished: . [mthomas@comet-ln2 OPENMP] cat hello_openmp.32661678.comet-07-47.out Hello from Thread Number[ 5 ] and Welcome HPC Trainees! Hello from Thread Number[ 7 ] and Welcome HPC Trainees! Hello from Thread Number[ 16 ] and Welcome HPC Trainees! Hello from Thread Number[ 9 ] and Welcome HPC Trainees! Hello from Thread Number[ 18 ] and Welcome HPC Trainees! Hello from Thread Number[ 12 ] and Welcome HPC Trainees! Hello from Thread Number[ 10 ] and Welcome HPC Trainees! Hello from Thread Number[ 0 ] and Welcome HPC Trainees! Hello from Thread Number[ 14 ] and Welcome HPC Trainees! Hello from Thread Number[ 4 ] and Welcome HPC Trainees! Hello from Thread Number[ 3 ] and Welcome HPC Trainees! Hello from Thread Number[ 11 ] and Welcome HPC Trainees! Hello from Thread Number[ 19 ] and Welcome HPC Trainees! Hello from Thread Number[ 22 ] and Welcome HPC Trainees! Hello from Thread Number[ 15 ] and Welcome HPC Trainees! Hello from Thread Number[ 2 ] and Welcome HPC Trainees! Hello from Thread Number[ 6 ] and Welcome HPC Trainees! Hello from Thread Number[ 1 ] and Welcome HPC Trainees! Hello from Thread Number[ 21 ] and Welcome HPC Trainees! Hello from Thread Number[ 20 ] and Welcome HPC Trainees! Hello from Thread Number[ 17 ] and Welcome HPC Trainees! Hello from Thread Number[ 23 ] and Welcome HPC Trainees! Hello from Thread Number[ 13 ] and Welcome HPC Trainees! Hello from Thread Number[ 8 ] and Welcome HPC Trainees! . [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; ### Hybrid (MPI + OpenMP) Jobs: &lt;a name=\"hybrid-mpi-omp\"&gt;&lt;/a&gt; &lt;b&gt;Subsections:&lt;/b&gt; * [Hybrid (MPI + OpenMP): Source Code](#hybrid-mpi-omp-source) * [Hybrid (MPI + OpenMP): Compiling](#hybrid-mpi-omp-compile) * [Hybrid (MPI + OpenMP): Batch Script Submission](#hybrid-mpi-omp-batch-submit) * [Hybrid (MPI + OpenMP): Batch Script Output](#hybrid-mpi-omp-batch-output) ### Hybrid (MPI + OpenMP) Source Code: &lt;a name=\"hybrid-mpi-omp-source\"&gt;&lt;/a&gt; #Several HPC codes use a hybrid MPI, OpenMP approach. * `ibrun` wrapper developed to handle such hybrid use cases. Automatically senses the MPI build (mvapich2, openmpi) and binds tasks correctly. * `ibrun -help` gives detailed usage info. * hello_hybrid.c is a sample code, and hello_hybrid.cmd shows “ibrun” usage. * Change to the HYBRID examples directory: . [mthomas@comet-ln2 comet101]$ cd HYBRID/ [mthomas@comet-ln2 HYBRID]$ ll total 94 drwxr-xr-x 2 username use300 5 Aug 5 19:02 . drwxr-xr-x 16 username use300 16 Aug 5 19:02 .. -rwxr-xr-x 1 username use300 103032 Aug 5 19:02 hello_hybrid -rw-r–r– 1 username use300 636 Aug 5 19:02 hello_hybrid.c -rw-r–r– 1 username use300 390 Aug 5 19:02 hybrid-slurm.sb . * Look at the contents of the `hello_hybrid.c` file . [mthomas@comet-ln2 HYBRID]$ cat hello_hybrid.c #include #include \"mpi.h\" #include . int main(int argc, char *argv[]) { int numprocs, rank, namelen; char processor_name[MPI_MAX_PROCESSOR_NAME]; int iam = 0, np = 1; . MPI_Init(&amp;argc, &amp;argv); MPI_Comm_size(MPI_COMM_WORLD, &amp;numprocs); MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank); MPI_Get_processor_name(processor_name, &amp;namelen); . #pragma omp parallel default(shared) private(iam, np) { np = omp_get_num_threads(); iam = omp_get_thread_num(); printf(“Hello Webinar participants from thread %d out of %d from process %d out of %d on %s\\n”, iam, np, rank, numprocs, processor_name); } . MPI_Finalize(); } . [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### Hybrid (MPI + OpenMP): Compiling: &lt;a name=\"hybrid-mpi-omp-compile\"&gt;&lt;/a&gt; * To compile the hybrid MPI + OpenMPI code, we need to refer to the table of compilers listed above (and listed in the user guide). * We will use the command `mpicx -openmp` . [mthomas@comet-ln2 HYBRID]$ mpicc -openmp -o hello_hybrid hello_hybrid.c [mthomas@comet-ln2 HYBRID]$ ll total 39 drwxr-xr-x 2 username use300 5 Aug 6 00:12 . drwxr-xr-x 16 username use300 16 Aug 5 19:02 .. -rwxr-xr-x 1 username use300 103032 Aug 6 00:12 hello_hybrid -rw-r–r– 1 username use300 636 Aug 5 19:02 hello_hybrid.c -rw-r–r– 1 username use300 390 Aug 5 19:02 hybrid-slurm.sb . [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### Hybrid (MPI + OpenMP): Batch Script Submission: &lt;a name=\"hybrid-mpi-omp-batch-submit\"&gt;&lt;/a&gt; * To submit the hybrid code, we still use the `ibrun` command. * In this example, we set the number of threads explicitly. [mthomas@comet-ln2 HYBRID]$ cat hybrid-slurm.sb #!/bin/bash #SBATCH –job-name=”hellohybrid” #SBATCH –output=”hellohybrid.%j.%N.out” #SBATCH –partition=compute #SBATCH –nodes=2 #SBATCH –ntasks-per-node=24 #SBATCH –export=ALL #SBATCH -t 01:30:00 . ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/cpu/#define-the-user-environment",
    "relUrl": "/docs/comet-101/cpu/#define-the-user-environment"
  },"37": {
    "doc": "Compiling and Running CPU Jobss",
    "title": "Define the user environment",
    "content": "source /etc/profile.d/modules.sh module purge module load intel module load mvapich2_ib . #This job runs with 2 nodes, 24 cores per node for a total of 48 cores. ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/cpu/#define-the-user-environment-1",
    "relUrl": "/docs/comet-101/cpu/#define-the-user-environment-1"
  },"38": {
    "doc": "Compiling and Running CPU Jobss",
    "title": "We use 8 MPI tasks and 6 OpenMP threads per MPI task",
    "content": "export OMP_NUM_THREADS=6 ibrun –npernode 4 ./hello_hybrid . * Submit the job to the Slurm queue, and check the job status . [mthomas@comet-ln2 HYBRID]$ sbatch hybrid-slurm.sb Submitted batch job 18347079 [mthomas@comet-ln2 HYBRID]$ squeue -u username JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 18347079 compute hellohyb username R 0:04 2 comet-01-[01,04] [mthomas@comet-ln2 HYBRID]$ ll . [Back to CPU Jobs](#comp-and-run-cpu-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### Hybrid (MPI + OpenMP): Batch Script Output: &lt;a name=\"hybrid-mpi-omp-batch-output\"&gt;&lt;/a&gt; . [mthomas@comet-ln2 HYBRID]$ ll total 122 drwxr-xr-x 2 username use300 6 Aug 6 00:12 . drwxr-xr-x 16 username use300 16 Aug 5 19:02 .. -rwxr-xr-x 1 username use300 103032 Aug 6 00:12 hello_hybrid -rw-r–r– 1 username use300 3696 Aug 6 00:12 hellohybrid.18347079.comet-01-01.out -rw-r–r– 1 username use300 636 Aug 5 19:02 hello_hybrid.c -rw-r–r– 1 username use300 390 Aug 5 19:02 hybrid-slurm.sb [mthomas@comet-ln2 HYBRID]$ cat hellohybrid.18347079.comet-01-01.out Hello from thread 4 out of 6 from process 3 out of 8 on comet-01-01.sdsc.edu Hello from thread 3 out of 6 from process 2 out of 8 on comet-01-01.sdsc.edu Hello from thread 0 out of 6 from process 1 out of 8 on comet-01-01.sdsc.edu Hello from thread 2 out of 6 from process 2 out of 8 on comet-01-01.sdsc.edu Hello from thread 1 out of 6 from process 3 out of 8 on comet-01-01.sdsc.edu Hello from thread 2 out of 6 from process 1 out of 8 on comet-01-01.sdsc.edu Hello from thread 4 out of 6 from process 2 out of 8 on comet-01-01.sdsc.edu Hello from thread 0 out of 6 from process 3 out of 8 on comet-01-01.sdsc.edu Hello from thread 3 out of 6 from process 1 out of 8 on comet-01-01.sdsc.edu Hello from thread 5 out of 6 from process 2 out of 8 on comet-01-01.sdsc.edu Hello from thread 3 out of 6 from process 3 out of 8 on comet-01-01.sdsc.edu Hello from thread 4 out of 6 from process 1 out of 8 on comet-01-01.sdsc.edu Hello from thread 0 out of 6 from process 2 out of 8 on comet-01-01.sdsc.edu Hello from thread 2 out of 6 from process 3 out of 8 on comet-01-01.sdsc.edu Hello from thread 5 out of 6 from process 1 out of 8 on comet-01-01.sdsc.edu Hello from thread 5 out of 6 from process 3 out of 8 on comet-01-01.sdsc.edu Hello from thread 3 out of 6 from process 0 out of 8 on comet-01-01.sdsc.edu Hello from thread 2 out of 6 from process 0 out of 8 on comet-01-01.sdsc.edu Hello from thread 0 out of 6 from process 0 out of 8 on comet-01-01.sdsc.edu Hello from thread 4 out of 6 from process 0 out of 8 on comet-01-01.sdsc.edu Hello from thread 5 out of 6 from process 0 out of 8 on comet-01-01.sdsc.edu Hello from thread 1 out of 6 from process 2 out of 8 on comet-01-01.sdsc.edu Hello from thread 1 out of 6 from process 1 out of 8 on comet-01-01.sdsc.edu Hello from thread 1 out of 6 from process 0 out of 8 on comet-01-01.sdsc.edu Hello from thread 0 out of 6 from process 7 out of 8 on comet-01-04.sdsc.edu Hello from thread 0 out of 6 from process 6 out of 8 on comet-01-04.sdsc.edu Hello from thread 2 out of 6 from process 7 out of 8 on comet-01-04.sdsc.edu Hello from thread 2 out of 6 from process 6 out of 8 on comet-01-04.sdsc.edu Hello from thread 3 out of 6 from process 7 out of 8 on comet-01-04.sdsc.edu Hello from thread 5 out of 6 from process 6 out of 8 on comet-01-04.sdsc.edu Hello from thread 4 out of 6 from process 6 out of 8 on comet-01-04.sdsc.edu Hello from thread 1 out of 6 from process 7 out of 8 on comet-01-04.sdsc.edu Hello from thread 4 out of 6 from process 7 out of 8 on comet-01-04.sdsc.edu Hello from thread 1 out of 6 from process 6 out of 8 on comet-01-04.sdsc.edu Hello from thread 0 out of 6 from process 4 out of 8 on comet-01-04.sdsc.edu Hello from thread 5 out of 6 from process 4 out of 8 on comet-01-04.sdsc.edu Hello from thread 2 out of 6 from process 4 out of 8 on comet-01-04.sdsc.edu Hello from thread 1 out of 6 from process 4 out of 8 on comet-01-04.sdsc.edu Hello from thread 3 out of 6 from process 4 out of 8 on comet-01-04.sdsc.edu Hello from thread 4 out of 6 from process 4 out of 8 on comet-01-04.sdsc.edu Hello from thread 0 out of 6 from process 5 out of 8 on comet-01-04.sdsc.edu Hello from thread 1 out of 6 from process 5 out of 8 on comet-01-04.sdsc.edu Hello from thread 4 out of 6 from process 5 out of 8 on comet-01-04.sdsc.edu Hello from thread 2 out of 6 from process 5 out of 8 on comet-01-04.sdsc.edu Hello from thread 5 out of 6 from process 5 out of 8 on comet-01-04.sdsc.edu Hello from thread 3 out of 6 from process 6 out of 8 on comet-01-04.sdsc.edu Hello from thread 5 out of 6 from process 7 out of 8 on comet-01-04.sdsc.edu Hello from thread 3 out of 6 from process 5 out of 8 on comet-01-04.sdsc.edu [mthomas@comet-ln2 HYBRID]$ ``` . Back to CPU Jobs Back to Top . ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/cpu/#we-use-8-mpi-tasks-and-6-openmp-threads-per-mpi-task",
    "relUrl": "/docs/comet-101/cpu/#we-use-8-mpi-tasks-and-6-openmp-threads-per-mpi-task"
  },"39": {
    "doc": "Compiling and Running CPU Jobss",
    "title": "Compiling and Running CPU Jobss",
    "content": " ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/cpu/",
    "relUrl": "/docs/comet-101/cpu/"
  },"40": {
    "doc": "Hands-on Examples",
    "title": "Hands-on Examples",
    "content": ". | Compiling and Running GPU/CUDA Jobs | GPU Hello World (GPU) | GPU Enumeration | CUDA Mat-Mult | Compiling and Running CPU Jobs | Hello World (MPI) | Hello World (OpenMPI) | Compiling and Running Hybrid (MPI + OpenMP) Jobs | . ",
    "url": "http://localhost:4000/dev.io/docs/comet/examples",
    "relUrl": "/docs/comet/examples"
  },"41": {
    "doc": "Hands-on Examples",
    "title": "Hands-on Examples",
    "content": ". | Compiling and Running GPU/CUDA Jobs | GPU Hello World (GPU) | GPU Enumeration | CUDA Mat-Mult | Compiling and Running CPU Jobs | Hello World (MPI) | Hello World (OpenMPI) | Compiling and Running Hybrid (MPI + OpenMP) Jobs | . ",
    "url": "http://localhost:4000/dev.io/docs/expanse/examples",
    "relUrl": "/docs/expanse/examples"
  },"42": {
    "doc": "Example Notebooks",
    "title": "Example Notebooks",
    "content": "This page will be updated regularly with example notebooks, primarly for beginners and those who are new to using notebooks on Comet. ",
    "url": "http://localhost:4000/dev.io/docs/notebooks/examples",
    "relUrl": "/docs/notebooks/examples"
  },"43": {
    "doc": "Example Notebooks",
    "title": "Beginner Tutorials",
    "content": ". | Python Series | Boring Python Notebooks | GPU Notebook Examples | . ",
    "url": "http://localhost:4000/dev.io/docs/notebooks/examples#beginner-tutorials",
    "relUrl": "/docs/notebooks/examples#beginner-tutorials"
  },"44": {
    "doc": "Example Notebooks",
    "title": "More Advanced",
    "content": ". | Data Visualization With Python Using Jupyter Notebooks | . ",
    "url": "http://localhost:4000/dev.io/docs/notebooks/examples#more-advanced",
    "relUrl": "/docs/notebooks/examples#more-advanced"
  },"45": {
    "doc": "comp-and-run-cuda-jobs",
    "title": "Compiling and Running GPU/CUDA Jobs",
    "content": "Sections: . | GPU Hello World (GPU) | GPU Enumeration | CUDA Mat-Mult | . Note: Expanse provides both NVIDIA K80 and P100 GPU-based resources. These GPU nodes are allocated as separate resources. Make sure you have enough allocations and that you are using the right account. For more details and current information about the Expanse GPU nodes, see the Expanse User Guide. Expanse GPU Hardware: . ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/gpu/#compiling-and-running-gpucuda-jobs",
    "relUrl": "/docs/expanse-101/gpu/#compiling-and-running-gpucuda-jobs"
  },"46": {
    "doc": "comp-and-run-cuda-jobs",
    "title": "In order to compile the CUDA code, you need to load the CUDA module and verify",
    "content": "that you have access to the CUDA compile command, nvcc: . [mthomas@expanse-ln3:~/expanse101] module list Currently Loaded Modulefiles: 1) intel/2018.1.163 2) mvapich2_ib/2.3.2 [mthomas@expanse-ln3:~/expanse101] module purge [mthomas@expanse-ln3:~/expanse101] module load cuda [mthomas@expanse-ln3:~/expanse101] module list Currently Loaded Modulefiles: 1) cuda/10.1 [mthomas@expanse-ln3:~/expanse101] which nvcc /usr/local/cuda-10.1/bin/nvcc . Back to GPU/CUDA Jobs Back to Top . GPU/CUDA Example: Hello World . Subsections: . | GPU Hello World: Compiling | GPU Hello World: Batch Script Submission | GPU Hello World: Batch Job Output | . GPU Hello World: Compiling . Simple hello runs a cuda command to get the device count on the node that job is assigned to. : . [mthomas@expanse-ln3:~/expanse101] cd CUDA/hello_cuda [mthomas@expanse-ln3:~/expanse101/CUDA/hello_cuda] ll total 30 drwxr-xr-x 2 mthomas use300 4 Apr 16 01:59 . drwxr-xr-x 4 mthomas use300 11 Apr 16 01:57 .. -rw-r--r-- 1 mthomas use300 313 Apr 16 01:59 hello_cuda.cu -rw-r--r-- 1 mthomas use300 269 Apr 16 01:58 hello_cuda.sb [mthomas@expanse-ln3:~/expanse101/CUDA/cuda_hello] cat hello_cuda.cu /* * hello_cuda.cu * Copyright 1993-2010 NVIDIA Corporation. * All right reserved */ #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; int main( void ) { int deviceCount; cudaGetDeviceCount( &amp;deviceCount ); printf(\"Hello, Webinar Participants! You have %d devices\\n\", deviceCount ); return 0; } . | Compile using the nvcc&lt;/b&gt; command: ``` [mthomas@expanse-ln3:~/expanse101/CUDA/cuda_hello] nvcc -o hello_cuda hello_cuda.cu [mthomas@expanse-ln3:~/expanse101/CUDA/cuda_hello] ll hello_cuda -rwxr-xr-x 1 user use300 517437 Apr 10 19:35 hello_cuda -rw-r–r– 1 user use300 304 Apr 10 19:35 hello_cuda.cu [expanse-ln2:~/cuda/hello_cuda] | . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### &lt;a name=\"hello-world-gpu-batch-submit\"&gt;&lt;/a&gt;GPU Hello World: Batch Script Submit * GPU jobs can be run via the slurm scheduler, or on interactive nodes. * The slurm scheduler batch script is shown below: . [mthomas@expanse-ln3:~/expanse101/CUDA/cuda_hello] cat hello_cuda.sb #!/bin/bash #SBATCH –job-name=”hello_cuda” #SBATCH –output=”hello_cuda.%j.%N.out” #SBATCH –partition=gpu-shared #SBATCH –nodes=1 #SBATCH –ntasks-per-node=12 #SBATCH –gres=gpu:2 #SBATCH -t 01:00:00 . ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/gpu/#in-order-to-compile-the-cuda-code-you-need-to-load-the-cuda-module-and-verify",
    "relUrl": "/docs/expanse-101/gpu/#in-order-to-compile-the-cuda-code-you-need-to-load-the-cuda-module-and-verify"
  },"47": {
    "doc": "comp-and-run-cuda-jobs",
    "title": "Define the user environment",
    "content": "source /etc/profile.d/modules.sh module purge module load intel module load mvapich2_ib #Load the cuda module module load cuda . #Run the job ./hello_cuda . * Some of the batch script variables are described below. For more details see the Expanse user guide. * GPU nodes can be accessed via either the \"gpu\" or the \"gpu-shared\" partitions: . #SBATCH -p gpu . or . #SBATCH -p gpu-shared . In addition to the partition name (required), the type of gpu (optional) and  the individual GPUs are scheduled as a resource. #SBATCH –gres=gpu[:type]:n . GPUs will be allocated on a first available, first schedule basis, unless specified with the [type] option, where type can be &lt;b&gt;`k80`&lt;/b&gt; or &lt;b&gt;`p100`&lt;/b&gt; Note: type is case sensitive. #SBATCH –gres=gpu:4 #first available gpu node #SBATCH –gres=gpu:k80:4 #only k80 nodes #SBATCH –gres=gpu:p100:4 #only p100 nodes . &lt;b&gt;Submit the job&lt;/b&gt; &lt;br&gt; To run the job, type the batch script submission command: . [mthomas@expanse-ln3:~/expanse101/CUDA/cuda_hello] sbatch hello_cuda.sb Submitted batch job 32663172 [mthomas@expanse-ln3:~/expanse101/CUDA/cuda_hello] . &lt;b&gt;Monitor the job until it is finished:&lt;/b&gt; . [user@expanse-ln2:~/cuda/hello_cuda] squeue -u mthomas [mthomas@expanse-ln3:~/expanse101/CUDA/cuda_hello] sbatch hello_cuda.sb Submitted batch job 32663081 [mthomas@expanse-ln3:~/expanse101/CUDA/cuda_hello] squeue -u mthomas JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32663081 gpu-share hello_cu mthomas PD 0:00 1 (Resources) . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### &lt;a name=\"hello-world-gpu-batch-output\"&gt;&lt;/a&gt;GPU Hello World: Batch Job Output . [mthomas@expanse-ln3:~/expanse101/CUDA/cuda_hello] cat hello_cuda.32663172.expanse-30-04.out . Hello, Webinar Participants! You have 2 devices . [mthomas@expanse-ln3:~/expanse101/CUDA/cuda_hello] . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; ### &lt;a name=\"enum-gpu\"&gt;&lt;/a&gt;GPU/CUDA Example: Enumeration Sections: * [GPU Enumeration: Compiling](#enum-gpu-compile) * [GPU Enumeration: Batch Script Submission](#enum-gpu-batch-submit) * [GPU Enumeration: Batch Job Output](#enum-gpu-batch-output ) &lt;hr&gt; #### &lt;a name=\"enum-gpu-compile\"&gt;&lt;/a&gt;GPU Enumeration: Compiling &lt;b&gt;GPU Enumeration Code:&lt;/b&gt; This code accesses the cudaDeviceProp object and returns information about the devices on the node. The list below is only some of the information that you can look for. The property values can be used to dynamically allocate or distribute your compute threads accross the GPU hardware in response to the GPU type. [user@expanse-ln2:~/cuda/gpu_enum] cat gpu_enum.cu #include . int main( void ) { cudaDeviceProp prop; int count; printf( “ — Obtaining General Information for CUDA devices —\\n” ); cudaGetDeviceCount( &amp;count ) ; for (int i=0; i&lt; count; i++) { cudaGetDeviceProperties( &amp;prop, i ) ; printf( “ — General Information for device %d —\\n”, i ); printf( “Name: %s\\n”, prop.name ); . printf( “Compute capability: %d.%d\\n”, prop.major, prop.minor ); printf( “Clock rate: %d\\n”, prop.clockRate ); printf( “Device copy overlap: “ ); . if (prop.deviceOverlap) printf( “Enabled\\n” ); else printf( “Disabled\\n”); . printf( “Kernel execution timeout : “ ); . if (prop.kernelExecTimeoutEnabled) printf( “Enabled\\n” ); else printf( “Disabled\\n” ); . printf( “ — Memory Information for device %d —\\n”, i ); printf( “Total global mem: %ld\\n”, prop.totalGlobalMem ); printf( “Total constant Mem: %ld\\n”, prop.totalConstMem ); printf( “Max mem pitch: %ld\\n”, prop.memPitch ); printf( “Texture Alignment: %ld\\n”, prop.textureAlignment ); printf( “ — MP Information for device %d —\\n”, i ); printf( “Multiprocessor count: %d\\n”, prop.multiProcessorCount ); printf( “Shared mem per mp: %ld\\n”, prop.sharedMemPerBlock ); printf( “Registers per mp: %d\\n”, prop.regsPerBlock ); printf( “Threads in warp: %d\\n”, prop.warpSize ); printf( “Max threads per block: %d\\n”, prop.maxThreadsPerBlock ); printf( “Max thread dimensions: (%d, %d, %d)\\n”, prop.maxThreadsDim[0], prop.maxThreadsDim[1], prop.maxThreadsDim[2] ); printf( “Max grid dimensions: (%d, %d, %d)\\n”, prop.maxGridSize[0], prop.maxGridSize[1], prop.maxGridSize[2] ); printf( “\\n” ); } } . To compile: check your environment and use the CUDA &lt;b&gt;`nvcc`&lt;/b&gt; command: . [expanse-ln2:~/cuda/gpu_enum] module purge [expanse-ln2:~/cuda/gpu_enum] which nvcc /usr/bin/which: no nvcc in (/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/sdsc/bin:/opt/sdsc/sbin:/opt/ibutils/bin:/usr/java/latest/bin:/opt/pdsh/bin:/opt/rocks/bin:/opt/rocks/sbin:/home/user/bin) [expanse-ln2:~/cuda/gpu_enum] module load cuda [expanse-ln2:~/cuda/gpu_enum] which nvcc /usr/local/cuda-7.0/bin/nvcc [expanse-ln2:~/cuda/gpu_enum] nvcc -o gpu_enum -I. gpu_enum.cu [expanse-ln2:~/cuda/gpu_enum] ll gpu_enum -rwxr-xr-x 1 user use300 517632 Apr 10 18:39 gpu_enum [expanse-ln2:~/cuda/gpu_enum] . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### &lt;a name=\"enum-gpu-batch-submit\"&gt;&lt;/a&gt;GPU Enumeration: Batch Script Submission &lt;b&gt;Contents of the Slurm script &lt;/b&gt; Script is asking for 1 GPU. [expanse-ln2: ~/cuda/gpu_enum] cat gpu_enum.sb #!/bin/bash #SBATCH –job-name=”gpu_enum” #SBATCH –output=”gpu_enum.%j.%N.out” #SBATCH –partition=gpu-shared # define GPU partition #SBATCH –nodes=1 #SBATCH –ntasks-per-node=6 #SBATCH –gres=gpu:1 # define type of GPU #SBATCH -t 00:05:00 . ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/gpu/#define-the-user-environment",
    "relUrl": "/docs/expanse-101/gpu/#define-the-user-environment"
  },"48": {
    "doc": "comp-and-run-cuda-jobs",
    "title": "Define the user environment",
    "content": "source /etc/profile.d/modules.sh module purge module load intel module load mvapich2_ib #Load the cuda module module load cuda . #Run the job ./gpu_enum . &lt;b&gt;Submit the job &lt;/b&gt; * To run the job, type the batch script submission command: . [mthomas@expanse-ln3:~/expanse101/CUDA/gpu_enum] sbatch hello_cuda.sb Submitted batch job 32663364 . &lt;b&gt;Monitor the job &lt;/b&gt; * You can monitor the job until it is finished using the `sqeue` command: . [mthomas@expanse-ln3:~/expanse101/CUDA/gpu_enum] squeue -u mthomas JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32663364 gpu-share gpu_enum mthomas PD 0:00 1 (Resources) . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### &lt;a name=\"enum-gpu-batch-output\"&gt;&lt;/a&gt;GPU Enumeration: Batch Job Output * Output from script is for multiple devices, which is what was specified in script. [user@expanse-ln2:~/cuda/gpu_enum] cat gpu_enum.22527745.expanse-31-10.out — Obtaining General Information for CUDA devices — — General Information for device 0 — — Obtaining General Information for CUDA devices — — General Information for device 0 — Name: Tesla P100-PCIE-16GB Compute capability: 6.0 Clock rate: 1328500 Device copy overlap: Enabled Kernel execution timeout : Disabled — Memory Information for device 0 — Total global mem: 17071734784 Total constant Mem: 65536 Max mem pitch: 2147483647 Texture Alignment: 512 — MP Information for device 0 — Multiprocessor count: 56 Shared mem per mp: 49152 Registers per mp: 65536 Threads in warp: 32 Max threads per block: 1024 Max thread dimensions: (1024, 1024, 64) Max grid dimensions: (2147483647, 65535, 65535) . * If we change the batch script to ask for 2 devices (see line 8): . 1 #!/bin/bash 2 #SBATCH –job-name=”gpu_enum” 3 #SBATCH –output=”gpu_enum.%j.%N.out” 4 #SBATCH –partition=gpu-shared # define GPU partition 5 #SBATCH –nodes=1 6 #SBATCH –ntasks-per-node=6 7 ####SBATCH –gres=gpu:1 # define type of GPU 8 #SBATCH –gres=gpu:2 # first available 9 #SBATCH -t 00:05:00 10 11 # Define the user environment 12 source /etc/profile.d/modules.sh 13 module purge 14 module load intel 15 module load mvapich2_ib 16 #Load the cuda module 17 module load cuda 18 19 #Run the job 20 ./gpu_enum . The output will show information for two devices: . [mthomas@expanse-ln3:~/expanse101/CUDA/gpu_enum] sbatch gpu_enum.sb !Submitted batch job 32663404 [mthomas@expanse-ln3:~/expanse101/CUDA/gpu_enum] squeue -u mthomas JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32663404 gpu-share gpu_enum mthomas CG 0:02 1 expanse-33-03 [mthomas@expanse-ln3:~/expanse101/CUDA/gpu_enum] cat gpu_enumX.32663404.expanse-33-03.out — Obtaining General Information for CUDA devices — — General Information for device 0 — Name: Tesla P100-PCIE-16GB Compute capability: 6.0 Clock rate: 1328500 Device copy overlap: Enabled Kernel execution timeout : Disabled — Memory Information for device 0 — Total global mem: 17071734784 Total constant Mem: 65536 Max mem pitch: 2147483647 Texture Alignment: 512 — MP Information for device 0 — Multiprocessor count: 56 Shared mem per mp: 49152 Registers per mp: 65536 Threads in warp: 32 Max threads per block: 1024 Max thread dimensions: (1024, 1024, 64) Max grid dimensions: (2147483647, 65535, 65535) . — General Information for device 1 — Name: Tesla P100-PCIE-16GB Compute capability: 6.0 Clock rate: 1328500 Device copy overlap: Enabled Kernel execution timeout : Disabled — Memory Information for device 1 — Total global mem: 17071734784 Total constant Mem: 65536 Max mem pitch: 2147483647 Texture Alignment: 512 — MP Information for device 1 — Multiprocessor count: 56 Shared mem per mp: 49152 Registers per mp: 65536 Threads in warp: 32 Max threads per block: 1024 Max thread dimensions: (1024, 1024, 64) Max grid dimensions: (2147483647, 65535, 65535) . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; ### &lt;a name=\"mat-mul-gpu\"&gt;&lt;/a&gt;GPU/CUDA Example: Matrix-Multiplication &lt;b&gt;Subsections:&lt;/b&gt; * [Matrix Mult. (GPU): Compiling](#mat-mul-gpu-compile) * [Matrix Mult. (GPU): Batch Script Submission](#mat-mul-gpu-batch-submit) * [Matrix Mult. (GPU): Batch Job Output](#mat-mul-gpu-batch-output ) #### &lt;a name=\"mat-mul-gpu\"&gt;&lt;/a&gt;CUDA Example: Matrix-Multiplication &lt;b&gt;Change to the CUDA Matrix-Multiplication example directory:&lt;/b&gt; . [mthomas@expanse-ln3:~/expanse101/CUDA/matmul] ll total 454 drwxr-xr-x 2 mthomas use300 11 Apr 16 02:59 . drwxr-xr-x 5 mthomas use300 5 Apr 16 02:37 .. -rw-r–r– 1 mthomas use300 253 Apr 16 01:56 cuda_matmul.sb -rw-r–r– 1 mthomas use300 5106 Apr 16 01:46 exception.h -rw-r–r– 1 mthomas use300 1168 Apr 16 01:46 helper_functions.h -rw-r–r– 1 mthomas use300 29011 Apr 16 01:46 helper_image.h -rw-r–r– 1 mthomas use300 23960 Apr 16 01:46 helper_string.h -rw-r–r– 1 mthomas use300 15414 Apr 16 01:46 helper_timer.h -rwxr-xr-x 1 mthomas use300 652768 Apr 16 01:46 matmul -rw-r–r– 1 mthomas use300 13482 Apr 16 02:36 matmul.cu -rw-r–r– 1 mthomas use300 370 Apr 16 02:59 matmul.sb . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### &lt;a name=\"mat-mul-gpu-compile\"&gt;&lt;/a&gt;Compiling CUDA Example (GPU) &lt;b&gt; Compile the code:&lt;/b&gt; . [user@expanse-ln2 CUDA]$ nvcc -o matmul -I. matrixMul.cu [user@expanse-ln2 CUDA]$ ll total 172 drwxr-xr-x 2 user user300 13 Aug 6 00:53 . drwxr-xr-x 16 user user300 16 Aug 5 19:02 .. -rw-r–r– 1 user user300 458 Aug 6 00:35 CUDA.18347152.expanse-33-02.out -rw-r–r– 1 user user300 458 Aug 6 00:37 CUDA.18347157.expanse-33-02.out -rw-r–r– 1 user user300 446 Aug 5 19:02 CUDA.8718375.expanse-30-08.out -rw-r–r– 1 user user300 253 Aug 5 19:02 cuda.sb -rw-r–r– 1 user user300 5106 Aug 5 19:02 exception.h -rw-r–r– 1 user user300 1168 Aug 5 19:02 helper_functions.h -rw-r–r– 1 user user300 29011 Aug 5 19:02 helper_image.h -rw-r–r– 1 user user300 23960 Aug 5 19:02 helper_string.h -rw-r–r– 1 user user300 15414 Aug 5 19:02 helper_timer.h -rwxr-xr-x 1 user user300 533168 Aug 6 00:53 matmul -rw-r–r– 1 user user300 13482 Aug 6 00:50 matrixMul.cu . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### &lt;a name=\"mat-mul-gpu-batch-submit\"&gt;&lt;/a&gt;Matrix Mult. (GPU): Batch Script Submission &lt;b&gt;Contents of the slurm script:&lt;/b&gt; . [user@expanse-ln2 CUDA]$ cat cuda.sb #!/bin/bash #SBATCH –job-name=”matmul” #SBATCH –output=”matmul.%j.%N.out” #SBATCH –partition=gpu-shared #SBATCH –nodes=1 #SBATCH –ntasks-per-node=6 #SBATCH –gres=gpu:1 #SBATCH -t 00:10:00 . ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/gpu/#define-the-user-environment-1",
    "relUrl": "/docs/expanse-101/gpu/#define-the-user-environment-1"
  },"49": {
    "doc": "comp-and-run-cuda-jobs",
    "title": "Define the user environment",
    "content": "source /etc/profile.d/modules.sh module purge module load intel module load mvapich2_ib #Load the cuda module module load cuda . #Run the job ./matmul . &lt;b&gt; Submit the job:&lt;/b&gt; . [mthomas@expanse-ln3:~/expanse101/CUDA/matmul] sbatch matmul.sb Submitted batch job 32663647 . &lt;b&gt;Monitor the job:&lt;/b&gt; . [mthomas@expanse-ln3:~/expanse101/CUDA/matmul] squeue -u mthomas JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32663647 gpu-share matmul mthomas PD 0:00 1 (Resources) [mthomas@expanse-ln3:~/expanse101/CUDA/matmul] . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### &lt;a name=\"mat-mul-gpu-batch-output\"&gt;&lt;/a&gt;Matrix Mult. (GPU): Batch Job Output . [mthomas@expanse-ln3:~/expanse101/CUDA/matmul] cat matmul.32663647.expanse-33-03.out [Matrix Multiply Using CUDA] - Starting… GPU Device 0: “Tesla P100-PCIE-16GB” with compute capability 6.0 . MatrixA(320,320), MatrixB(640,320) Computing result using CUDA Kernel… done Performance= 1676.99 GFlop/s, Time= 0.078 msec, Size= 131072000 Ops, WorkgroupSize= 1024 threads/block Checking computed result for correctness: Result = PASS . NOTE: The CUDA Samples are not meant for performance measurements. Results may vary when GPU Boost is enabled. ``` . Back to GPU/CUDA Jobs Back to Top . ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/gpu/#define-the-user-environment-2",
    "relUrl": "/docs/expanse-101/gpu/#define-the-user-environment-2"
  },"50": {
    "doc": "comp-and-run-cuda-jobs",
    "title": "comp-and-run-cuda-jobs",
    "content": " ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/gpu/",
    "relUrl": "/docs/expanse-101/gpu/"
  },"51": {
    "doc": "comp-and-run-cuda-jobs",
    "title": "Compiling and Running GPU/CUDA Jobs",
    "content": "Sections: . | GPU Hello World (GPU) | GPU Enumeration | CUDA Mat-Mult | . Note: Comet provides both NVIDIA K80 and P100 GPU-based resources. These GPU nodes are allocated as separate resources. Make sure you have enough allocations and that you are using the right account. For more details and current information about the Comet GPU nodes, see the Comet User Guide. Comet GPU Hardware: . ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/gpu/#compiling-and-running-gpucuda-jobs",
    "relUrl": "/docs/comet-101/gpu/#compiling-and-running-gpucuda-jobs"
  },"52": {
    "doc": "comp-and-run-cuda-jobs",
    "title": "In order to compile the CUDA code, you need to load the CUDA module and verify",
    "content": "that you have access to the CUDA compile command, nvcc: . [mthomas@comet-ln3:~/comet101] module list Currently Loaded Modulefiles: 1) intel/2018.1.163 2) mvapich2_ib/2.3.2 [mthomas@comet-ln3:~/comet101] module purge [mthomas@comet-ln3:~/comet101] module load cuda [mthomas@comet-ln3:~/comet101] module list Currently Loaded Modulefiles: 1) cuda/10.1 [mthomas@comet-ln3:~/comet101] which nvcc /usr/local/cuda-10.1/bin/nvcc . Back to GPU/CUDA Jobs Back to Top . GPU/CUDA Example: Hello World . Subsections: . | GPU Hello World: Compiling | GPU Hello World: Batch Script Submission | GPU Hello World: Batch Job Output | . GPU Hello World: Compiling . Simple hello runs a cuda command to get the device count on the node that job is assigned to. : . [mthomas@comet-ln3:~/comet101] cd CUDA/hello_cuda [mthomas@comet-ln3:~/comet101/CUDA/hello_cuda] ll total 30 drwxr-xr-x 2 mthomas use300 4 Apr 16 01:59 . drwxr-xr-x 4 mthomas use300 11 Apr 16 01:57 .. -rw-r--r-- 1 mthomas use300 313 Apr 16 01:59 hello_cuda.cu -rw-r--r-- 1 mthomas use300 269 Apr 16 01:58 hello_cuda.sb [mthomas@comet-ln3:~/comet101/CUDA/cuda_hello] cat hello_cuda.cu /* * hello_cuda.cu * Copyright 1993-2010 NVIDIA Corporation. * All right reserved */ #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; int main( void ) { int deviceCount; cudaGetDeviceCount( &amp;deviceCount ); printf(\"Hello, Webinar Participants! You have %d devices\\n\", deviceCount ); return 0; } . | Compile using the nvcc&lt;/b&gt; command: ``` [mthomas@comet-ln3:~/comet101/CUDA/cuda_hello] nvcc -o hello_cuda hello_cuda.cu [mthomas@comet-ln3:~/comet101/CUDA/cuda_hello] ll hello_cuda -rwxr-xr-x 1 user use300 517437 Apr 10 19:35 hello_cuda -rw-r–r– 1 user use300 304 Apr 10 19:35 hello_cuda.cu [comet-ln2:~/cuda/hello_cuda] | . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### &lt;a name=\"hello-world-gpu-batch-submit\"&gt;&lt;/a&gt;GPU Hello World: Batch Script Submit * GPU jobs can be run via the slurm scheduler, or on interactive nodes. * The slurm scheduler batch script is shown below: . [mthomas@comet-ln3:~/comet101/CUDA/cuda_hello] cat hello_cuda.sb #!/bin/bash #SBATCH –job-name=”hello_cuda” #SBATCH –output=”hello_cuda.%j.%N.out” #SBATCH –partition=gpu-shared #SBATCH –nodes=1 #SBATCH –ntasks-per-node=12 #SBATCH –gres=gpu:2 #SBATCH -t 01:00:00 . ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/gpu/#in-order-to-compile-the-cuda-code-you-need-to-load-the-cuda-module-and-verify",
    "relUrl": "/docs/comet-101/gpu/#in-order-to-compile-the-cuda-code-you-need-to-load-the-cuda-module-and-verify"
  },"53": {
    "doc": "comp-and-run-cuda-jobs",
    "title": "Define the user environment",
    "content": "source /etc/profile.d/modules.sh module purge module load intel module load mvapich2_ib #Load the cuda module module load cuda . #Run the job ./hello_cuda . * Some of the batch script variables are described below. For more details see the Comet user guide. * GPU nodes can be accessed via either the \"gpu\" or the \"gpu-shared\" partitions: . #SBATCH -p gpu . or . #SBATCH -p gpu-shared . In addition to the partition name (required), the type of gpu (optional) and  the individual GPUs are scheduled as a resource. #SBATCH –gres=gpu[:type]:n . GPUs will be allocated on a first available, first schedule basis, unless specified with the [type] option, where type can be &lt;b&gt;`k80`&lt;/b&gt; or &lt;b&gt;`p100`&lt;/b&gt; Note: type is case sensitive. #SBATCH –gres=gpu:4 #first available gpu node #SBATCH –gres=gpu:k80:4 #only k80 nodes #SBATCH –gres=gpu:p100:4 #only p100 nodes . &lt;b&gt;Submit the job&lt;/b&gt; &lt;br&gt; To run the job, type the batch script submission command: . [mthomas@comet-ln3:~/comet101/CUDA/cuda_hello] sbatch hello_cuda.sb Submitted batch job 32663172 [mthomas@comet-ln3:~/comet101/CUDA/cuda_hello] . &lt;b&gt;Monitor the job until it is finished:&lt;/b&gt; . [user@comet-ln2:~/cuda/hello_cuda] squeue -u mthomas [mthomas@comet-ln3:~/comet101/CUDA/cuda_hello] sbatch hello_cuda.sb Submitted batch job 32663081 [mthomas@comet-ln3:~/comet101/CUDA/cuda_hello] squeue -u mthomas JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32663081 gpu-share hello_cu mthomas PD 0:00 1 (Resources) . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### &lt;a name=\"hello-world-gpu-batch-output\"&gt;&lt;/a&gt;GPU Hello World: Batch Job Output . [mthomas@comet-ln3:~/comet101/CUDA/cuda_hello] cat hello_cuda.32663172.comet-30-04.out . Hello, Webinar Participants! You have 2 devices . [mthomas@comet-ln3:~/comet101/CUDA/cuda_hello] . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; ### &lt;a name=\"enum-gpu\"&gt;&lt;/a&gt;GPU/CUDA Example: Enumeration Sections: * [GPU Enumeration: Compiling](#enum-gpu-compile) * [GPU Enumeration: Batch Script Submission](#enum-gpu-batch-submit) * [GPU Enumeration: Batch Job Output](#enum-gpu-batch-output ) &lt;hr&gt; #### &lt;a name=\"enum-gpu-compile\"&gt;&lt;/a&gt;GPU Enumeration: Compiling &lt;b&gt;GPU Enumeration Code:&lt;/b&gt; This code accesses the cudaDeviceProp object and returns information about the devices on the node. The list below is only some of the information that you can look for. The property values can be used to dynamically allocate or distribute your compute threads accross the GPU hardware in response to the GPU type. [user@comet-ln2:~/cuda/gpu_enum] cat gpu_enum.cu #include . int main( void ) { cudaDeviceProp prop; int count; printf( “ — Obtaining General Information for CUDA devices —\\n” ); cudaGetDeviceCount( &amp;count ) ; for (int i=0; i&lt; count; i++) { cudaGetDeviceProperties( &amp;prop, i ) ; printf( “ — General Information for device %d —\\n”, i ); printf( “Name: %s\\n”, prop.name ); . printf( “Compute capability: %d.%d\\n”, prop.major, prop.minor ); printf( “Clock rate: %d\\n”, prop.clockRate ); printf( “Device copy overlap: “ ); . if (prop.deviceOverlap) printf( “Enabled\\n” ); else printf( “Disabled\\n”); . printf( “Kernel execution timeout : “ ); . if (prop.kernelExecTimeoutEnabled) printf( “Enabled\\n” ); else printf( “Disabled\\n” ); . printf( “ — Memory Information for device %d —\\n”, i ); printf( “Total global mem: %ld\\n”, prop.totalGlobalMem ); printf( “Total constant Mem: %ld\\n”, prop.totalConstMem ); printf( “Max mem pitch: %ld\\n”, prop.memPitch ); printf( “Texture Alignment: %ld\\n”, prop.textureAlignment ); printf( “ — MP Information for device %d —\\n”, i ); printf( “Multiprocessor count: %d\\n”, prop.multiProcessorCount ); printf( “Shared mem per mp: %ld\\n”, prop.sharedMemPerBlock ); printf( “Registers per mp: %d\\n”, prop.regsPerBlock ); printf( “Threads in warp: %d\\n”, prop.warpSize ); printf( “Max threads per block: %d\\n”, prop.maxThreadsPerBlock ); printf( “Max thread dimensions: (%d, %d, %d)\\n”, prop.maxThreadsDim[0], prop.maxThreadsDim[1], prop.maxThreadsDim[2] ); printf( “Max grid dimensions: (%d, %d, %d)\\n”, prop.maxGridSize[0], prop.maxGridSize[1], prop.maxGridSize[2] ); printf( “\\n” ); } } . To compile: check your environment and use the CUDA &lt;b&gt;`nvcc`&lt;/b&gt; command: . [comet-ln2:~/cuda/gpu_enum] module purge [comet-ln2:~/cuda/gpu_enum] which nvcc /usr/bin/which: no nvcc in (/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/sdsc/bin:/opt/sdsc/sbin:/opt/ibutils/bin:/usr/java/latest/bin:/opt/pdsh/bin:/opt/rocks/bin:/opt/rocks/sbin:/home/user/bin) [comet-ln2:~/cuda/gpu_enum] module load cuda [comet-ln2:~/cuda/gpu_enum] which nvcc /usr/local/cuda-7.0/bin/nvcc [comet-ln2:~/cuda/gpu_enum] nvcc -o gpu_enum -I. gpu_enum.cu [comet-ln2:~/cuda/gpu_enum] ll gpu_enum -rwxr-xr-x 1 user use300 517632 Apr 10 18:39 gpu_enum [comet-ln2:~/cuda/gpu_enum] . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### &lt;a name=\"enum-gpu-batch-submit\"&gt;&lt;/a&gt;GPU Enumeration: Batch Script Submission &lt;b&gt;Contents of the Slurm script &lt;/b&gt; Script is asking for 1 GPU. [comet-ln2: ~/cuda/gpu_enum] cat gpu_enum.sb #!/bin/bash #SBATCH –job-name=”gpu_enum” #SBATCH –output=”gpu_enum.%j.%N.out” #SBATCH –partition=gpu-shared # define GPU partition #SBATCH –nodes=1 #SBATCH –ntasks-per-node=6 #SBATCH –gres=gpu:1 # define type of GPU #SBATCH -t 00:05:00 . ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/gpu/#define-the-user-environment",
    "relUrl": "/docs/comet-101/gpu/#define-the-user-environment"
  },"54": {
    "doc": "comp-and-run-cuda-jobs",
    "title": "Define the user environment",
    "content": "source /etc/profile.d/modules.sh module purge module load intel module load mvapich2_ib #Load the cuda module module load cuda . #Run the job ./gpu_enum . &lt;b&gt;Submit the job &lt;/b&gt; * To run the job, type the batch script submission command: . [mthomas@comet-ln3:~/comet101/CUDA/gpu_enum] sbatch hello_cuda.sb Submitted batch job 32663364 . &lt;b&gt;Monitor the job &lt;/b&gt; * You can monitor the job until it is finished using the `sqeue` command: . [mthomas@comet-ln3:~/comet101/CUDA/gpu_enum] squeue -u mthomas JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32663364 gpu-share gpu_enum mthomas PD 0:00 1 (Resources) . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### &lt;a name=\"enum-gpu-batch-output\"&gt;&lt;/a&gt;GPU Enumeration: Batch Job Output * Output from script is for multiple devices, which is what was specified in script. [user@comet-ln2:~/cuda/gpu_enum] cat gpu_enum.22527745.comet-31-10.out — Obtaining General Information for CUDA devices — — General Information for device 0 — — Obtaining General Information for CUDA devices — — General Information for device 0 — Name: Tesla P100-PCIE-16GB Compute capability: 6.0 Clock rate: 1328500 Device copy overlap: Enabled Kernel execution timeout : Disabled — Memory Information for device 0 — Total global mem: 17071734784 Total constant Mem: 65536 Max mem pitch: 2147483647 Texture Alignment: 512 — MP Information for device 0 — Multiprocessor count: 56 Shared mem per mp: 49152 Registers per mp: 65536 Threads in warp: 32 Max threads per block: 1024 Max thread dimensions: (1024, 1024, 64) Max grid dimensions: (2147483647, 65535, 65535) . * If we change the batch script to ask for 2 devices (see line 8): . 1 #!/bin/bash 2 #SBATCH –job-name=”gpu_enum” 3 #SBATCH –output=”gpu_enum.%j.%N.out” 4 #SBATCH –partition=gpu-shared # define GPU partition 5 #SBATCH –nodes=1 6 #SBATCH –ntasks-per-node=6 7 ####SBATCH –gres=gpu:1 # define type of GPU 8 #SBATCH –gres=gpu:2 # first available 9 #SBATCH -t 00:05:00 10 11 # Define the user environment 12 source /etc/profile.d/modules.sh 13 module purge 14 module load intel 15 module load mvapich2_ib 16 #Load the cuda module 17 module load cuda 18 19 #Run the job 20 ./gpu_enum . The output will show information for two devices: . [mthomas@comet-ln3:~/comet101/CUDA/gpu_enum] sbatch gpu_enum.sb !Submitted batch job 32663404 [mthomas@comet-ln3:~/comet101/CUDA/gpu_enum] squeue -u mthomas JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32663404 gpu-share gpu_enum mthomas CG 0:02 1 comet-33-03 [mthomas@comet-ln3:~/comet101/CUDA/gpu_enum] cat gpu_enumX.32663404.comet-33-03.out — Obtaining General Information for CUDA devices — — General Information for device 0 — Name: Tesla P100-PCIE-16GB Compute capability: 6.0 Clock rate: 1328500 Device copy overlap: Enabled Kernel execution timeout : Disabled — Memory Information for device 0 — Total global mem: 17071734784 Total constant Mem: 65536 Max mem pitch: 2147483647 Texture Alignment: 512 — MP Information for device 0 — Multiprocessor count: 56 Shared mem per mp: 49152 Registers per mp: 65536 Threads in warp: 32 Max threads per block: 1024 Max thread dimensions: (1024, 1024, 64) Max grid dimensions: (2147483647, 65535, 65535) . — General Information for device 1 — Name: Tesla P100-PCIE-16GB Compute capability: 6.0 Clock rate: 1328500 Device copy overlap: Enabled Kernel execution timeout : Disabled — Memory Information for device 1 — Total global mem: 17071734784 Total constant Mem: 65536 Max mem pitch: 2147483647 Texture Alignment: 512 — MP Information for device 1 — Multiprocessor count: 56 Shared mem per mp: 49152 Registers per mp: 65536 Threads in warp: 32 Max threads per block: 1024 Max thread dimensions: (1024, 1024, 64) Max grid dimensions: (2147483647, 65535, 65535) . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; ### &lt;a name=\"mat-mul-gpu\"&gt;&lt;/a&gt;GPU/CUDA Example: Matrix-Multiplication &lt;b&gt;Subsections:&lt;/b&gt; * [Matrix Mult. (GPU): Compiling](#mat-mul-gpu-compile) * [Matrix Mult. (GPU): Batch Script Submission](#mat-mul-gpu-batch-submit) * [Matrix Mult. (GPU): Batch Job Output](#mat-mul-gpu-batch-output ) #### &lt;a name=\"mat-mul-gpu\"&gt;&lt;/a&gt;CUDA Example: Matrix-Multiplication &lt;b&gt;Change to the CUDA Matrix-Multiplication example directory:&lt;/b&gt; . [mthomas@comet-ln3:~/comet101/CUDA/matmul] ll total 454 drwxr-xr-x 2 mthomas use300 11 Apr 16 02:59 . drwxr-xr-x 5 mthomas use300 5 Apr 16 02:37 .. -rw-r–r– 1 mthomas use300 253 Apr 16 01:56 cuda_matmul.sb -rw-r–r– 1 mthomas use300 5106 Apr 16 01:46 exception.h -rw-r–r– 1 mthomas use300 1168 Apr 16 01:46 helper_functions.h -rw-r–r– 1 mthomas use300 29011 Apr 16 01:46 helper_image.h -rw-r–r– 1 mthomas use300 23960 Apr 16 01:46 helper_string.h -rw-r–r– 1 mthomas use300 15414 Apr 16 01:46 helper_timer.h -rwxr-xr-x 1 mthomas use300 652768 Apr 16 01:46 matmul -rw-r–r– 1 mthomas use300 13482 Apr 16 02:36 matmul.cu -rw-r–r– 1 mthomas use300 370 Apr 16 02:59 matmul.sb . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### &lt;a name=\"mat-mul-gpu-compile\"&gt;&lt;/a&gt;Compiling CUDA Example (GPU) &lt;b&gt; Compile the code:&lt;/b&gt; . [user@comet-ln2 CUDA]$ nvcc -o matmul -I. matrixMul.cu [user@comet-ln2 CUDA]$ ll total 172 drwxr-xr-x 2 user user300 13 Aug 6 00:53 . drwxr-xr-x 16 user user300 16 Aug 5 19:02 .. -rw-r–r– 1 user user300 458 Aug 6 00:35 CUDA.18347152.comet-33-02.out -rw-r–r– 1 user user300 458 Aug 6 00:37 CUDA.18347157.comet-33-02.out -rw-r–r– 1 user user300 446 Aug 5 19:02 CUDA.8718375.comet-30-08.out -rw-r–r– 1 user user300 253 Aug 5 19:02 cuda.sb -rw-r–r– 1 user user300 5106 Aug 5 19:02 exception.h -rw-r–r– 1 user user300 1168 Aug 5 19:02 helper_functions.h -rw-r–r– 1 user user300 29011 Aug 5 19:02 helper_image.h -rw-r–r– 1 user user300 23960 Aug 5 19:02 helper_string.h -rw-r–r– 1 user user300 15414 Aug 5 19:02 helper_timer.h -rwxr-xr-x 1 user user300 533168 Aug 6 00:53 matmul -rw-r–r– 1 user user300 13482 Aug 6 00:50 matrixMul.cu . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### &lt;a name=\"mat-mul-gpu-batch-submit\"&gt;&lt;/a&gt;Matrix Mult. (GPU): Batch Script Submission &lt;b&gt;Contents of the slurm script:&lt;/b&gt; . [user@comet-ln2 CUDA]$ cat cuda.sb #!/bin/bash #SBATCH –job-name=”matmul” #SBATCH –output=”matmul.%j.%N.out” #SBATCH –partition=gpu-shared #SBATCH –nodes=1 #SBATCH –ntasks-per-node=6 #SBATCH –gres=gpu:1 #SBATCH -t 00:10:00 . ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/gpu/#define-the-user-environment-1",
    "relUrl": "/docs/comet-101/gpu/#define-the-user-environment-1"
  },"55": {
    "doc": "comp-and-run-cuda-jobs",
    "title": "Define the user environment",
    "content": "source /etc/profile.d/modules.sh module purge module load intel module load mvapich2_ib #Load the cuda module module load cuda . #Run the job ./matmul . &lt;b&gt; Submit the job:&lt;/b&gt; . [mthomas@comet-ln3:~/comet101/CUDA/matmul] sbatch matmul.sb Submitted batch job 32663647 . &lt;b&gt;Monitor the job:&lt;/b&gt; . [mthomas@comet-ln3:~/comet101/CUDA/matmul] squeue -u mthomas JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 32663647 gpu-share matmul mthomas PD 0:00 1 (Resources) [mthomas@comet-ln3:~/comet101/CUDA/matmul] . [Back to GPU/CUDA Jobs](#comp-and-run-cuda-jobs) &lt;br&gt; [Back to Top](#top) &lt;hr&gt; #### &lt;a name=\"mat-mul-gpu-batch-output\"&gt;&lt;/a&gt;Matrix Mult. (GPU): Batch Job Output . [mthomas@comet-ln3:~/comet101/CUDA/matmul] cat matmul.32663647.comet-33-03.out [Matrix Multiply Using CUDA] - Starting… GPU Device 0: “Tesla P100-PCIE-16GB” with compute capability 6.0 . MatrixA(320,320), MatrixB(640,320) Computing result using CUDA Kernel… done Performance= 1676.99 GFlop/s, Time= 0.078 msec, Size= 131072000 Ops, WorkgroupSize= 1024 threads/block Checking computed result for correctness: Result = PASS . NOTE: The CUDA Samples are not meant for performance measurements. Results may vary when GPU Boost is enabled. ``` . Back to GPU/CUDA Jobs Back to Top . ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/gpu/#define-the-user-environment-2",
    "relUrl": "/docs/comet-101/gpu/#define-the-user-environment-2"
  },"56": {
    "doc": "comp-and-run-cuda-jobs",
    "title": "comp-and-run-cuda-jobs",
    "content": " ",
    "url": "http://localhost:4000/dev.io/docs/comet-101/gpu/",
    "relUrl": "/docs/comet-101/gpu/"
  },"57": {
    "doc": "Insecurity with direct node access",
    "title": "Insecurity with direct node access",
    "content": "This section described how to connection between the browser on your local host (laptop) to a Jupyter service running on Comet over HTTP and demonstrates why the connection is not secure. Log onto comet.sdsc.edu . ssh -Y -l &lt;username&gt; &lt;system name&gt;.sdsc.edu . | create a test directory, or cd into one you have already created | Clone the examples repository: git clone https://github.com/sdsc-hpc-training-org/notebook-examples.git | . Launch a notebook on the login node: . Run the jupyter command. Be sure to set the –ip to use the hostname, which will appear in your URL : [mthomas@comet-14-01:~] jupyter notebook --no-browser --ip='/bin/hostname' . You will see output similar to below: . [I 08:06:32.961 NotebookApp] JupyterLab extension loaded from /home/mthomas/miniconda3/lib/python3.7/site-packages/jupyterlab [I 08:06:32.961 NotebookApp] JupyterLab application directory is /home/mthomas/miniconda3/share/jupyter/lab [I 08:06:33.486 NotebookApp] Serving notebooks from local directory: /home/mthomas [I 08:06:33.487 NotebookApp] The Jupyter Notebook is running at: [I 08:06:33.487 NotebookApp] http://comet-14-01.sdsc.edu:8888/?token=6d7a48dda7cc1635d6d08f63aa1a696008fa89d8aa84ad2b [I 08:06:33.487 NotebookApp] or http://127.0.0.1:8888/?token=6d7a48dda7cc1635d6d08f63aa1a696008fa89d8aa84ad2b [I 08:06:33.487 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation). [C 08:06:33.494 NotebookApp] To access the notebook, open this file in a browser: file:///home/mthomas/.local/share/jupyter/runtime/nbserver-6614-open.html Or copy and paste one of these URLs: http://comet-14-01.sdsc.edu:8888/?token=6d7a48dda7cc1635d6d08f63aa1a696008fa89d8aa84ad2b or http://127.0.0.1:8888/?token=6d7a48dda7cc1635d6d08f63aa1a696008fa89d8aa84ad2b [I 08:06:45.773 NotebookApp] 302 GET /?token=6d7a48dda7cc1635d6d08f63aa1a696008fa89d8aa84ad2b (76.176.117.51) 0.74ms [E 08:06:45.925 NotebookApp] Could not open static file '' [W 08:06:46.033 NotebookApp] 404 GET /static/components/react/react-dom.production.min.js (76.176.117.51) 7.39ms referer=http://comet-14-01.sdsc.edu:8888/tree?token=6d7a48dda7cc1635d6d08f63aa1a696008fa89d8aa84ad2b [W 08:06:46.131 NotebookApp] 404 GET /static/components/react/react-dom.production.min.js (76.176.117.51) 1.02ms referer=http://comet-14-01.sdsc.edu:8888/tree?token=6d7a48dda7cc1635d6d08f63aa1a696008fa89d8aa84ad2b . Notice that the notebook URL is using HTTP, and when you connect the browser on your local sysetm to this URL, the connection will not be secure. Note: it is against SDSC Comet policy to run applications on the login nodes, and any applications being run will be killed by the system admins. A better way is to run the jobs on an interactive node or on a compute node using the batch queue (see the Comet User Guide), or on a compute node, which is described in the next sections. Obtain an interactive node: . Jobs can be run on the cluster in batch mode or in interactive mode. Batch jobs are performed remotely and without manual intervention. Interactive mode enable you to run/compile your program and environment setup on a compute node dedicated to you. To obtain an interactive node, type: srun --pty --nodes=1 --ntasks-per-node=24 -p compute -t 02:00:00 --wait 0 /bin/bash You will have to wait for your node to be allocated - which can take a few or many minutes. You will see pending messages like the ones below: . srun: job 24000544 queued and waiting for resources srun: job 24000544 has been allocated resources [mthomas@comet-18-29:~/hpctrain/python/PythonSeries] . You can also check the status of jobs in the queue system to get an idea of how long you may need to wait. Launch the Jupyter Notebook application. Note: this application will be running on a compute node, and you must keep track of the given URL: . jupyter notebook --no-browser --ip='/bin/hostname' . This will give you an address which has localhost in it and a token. Something like: http://comet-14-0-4:8888/?token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx You can then paste it into your browser. You will see a running Jupyter notebook and a listing of the notebooks in your directory. From there everything should be working as a regular notebook. Note: This token is your auth so don’t email/send it around. It will go away when you stop the notebook. To learn about Python, run the Python basics.ipynb notebook. To see an example of remote visualization, run the Matplotlib.ipynb notebook! . Access the node in your browser . Copy the the URL above into the browser running on your laptop. Use your jupyterlab/jupyter notebook server! . Enjoy. Note that your notebook is unsecured. ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/httpConnect/",
    "relUrl": "/docs/notebooks-101/httpConnect/"
  },"58": {
    "doc": "Jupyter Notebook Overview",
    "title": "Jupyter Notebook Overview",
    "content": ". Jupyter Notebooks are interactive web tools known as a computational notebooks, which researchers can use to combine software code, explanatory text and multimedia resources, and computational output, in a single document. Jupyter has emerged as a de facto standard for data scientists and other scientific domains. Notebooks can be launched locally and access local file systems, or they can be launched on a remote machine, which provides access to a user’s files on the remote system. In the latter case, the notebooks are launched via a process that creates a unique URL that is composed of the hostname plus an available port (chosen by the jupyter application) plus a one-time token. The user obtains this URL and enters it into a local web browser, where the notebook is available as long as the process on the remote machine is up and running. By default, these notebooks are not secure, and potentially expose a users local files to unwanted users. In this tutorial, we cover SDSC’s multi-tiered approach to running notebooks more securely: running notebooks in the usual way using the insecure HTTP connections; hosting a Jupyter service using HTTPS and Jupyter Lab; and our new Reverse Proxy Service (RPS). When used, the RPS will launch a batch script that creates a securely hosted HTTPS access point for the user, resulting in a safer, more secure notebook environment. By default, these notebooks are not secure, and potentially expose a user’s local files to unwanted access. In this tutorial, we present SDSC’s multitiered approach to running notebooks more securely. ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/overview/",
    "relUrl": "/docs/notebooks-101/overview/"
  },"59": {
    "doc": "Software Prerequisites",
    "title": "Install Miniconda",
    "content": "To install Miniconda on Linux, you need to locate and download the installer package for your system. For linx, you will find a list of installers https://docs.conda.io/en/latest/miniconda.html#linux-installers. On the HPC system, use: . wget &lt;link-to-installer-file&gt; . to download the install package. For SDSC HPC systems, the current link is the Miniconda3 Linux 64-bit: https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh . Once you have downloaded the correct installer, follow the installation instructions https://conda.io/projects/conda/en/latest/user-guide/install/index.html. For SDSC HPC systems Comet, TSCC, and Stratus, the name of the downloaded installer file is Miniconda3-latest-Linux-x86_64.sh . Run the installer . Change the permissions so you can execute the script: . chmod +x Miniconda3-latest-Linux-x86_64.sh . Run the bash install script: . bash Miniconda3-latest-Linux-x86_64.sh . or ./Miniconda3-latest-Linux-x86_64.sh . You should answer yes to almost all of the questions. Make sure to type in the word “yes” for the license agreement. Also be sure to type in “yes” when the installer asks you if you want to run conda init. In addition, you need to make sure that the installer has placed these two lines into your .bashrc file: . The Miniconda installer should prompt to add each of the following lines separately to the .bashrc file: . /home/$USER/miniconda3/etc/profile.d/conda.sh conda activate . If not present, add the two lines to the file. Once you have done this, restart your bash shell: run the command . source ~/.bashrc . which “restarts” the shell environment. Miniconda should now be installed. By default, Miniconda should be installed in your home directory: . Miniconda3 will now be installed into this location: /home/$USER/miniconda3 . If Miniconda still does not seem to be installed, try using the command source ~/.bashrc, which “restarts” conda. To verify the installation, run the command: . (base) [mthomas@comet-ln2:~] which conda ~/miniconda3/bin/conda . ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/prerequisites/#install-miniconda",
    "relUrl": "/docs/notebooks-101/prerequisites/#install-miniconda"
  },"60": {
    "doc": "Software Prerequisites",
    "title": "Install Jupyter Notebook",
    "content": "To run jupyter notebooks, you need to install the jupyter package using the command . conda install jupyter . To verify the installation, run the command: . (base) [$USER@comet-ln2:~] which jupyter ~/miniconda3/bin/jupyter . More installation information can be found here: https://anaconda.org/anaconda/jupyter. ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/prerequisites/#install-jupyter-notebook",
    "relUrl": "/docs/notebooks-101/prerequisites/#install-jupyter-notebook"
  },"61": {
    "doc": "Software Prerequisites",
    "title": "Install JupyterLab",
    "content": "JupyterLab is designed as an extensible environment and can be installed with conda, pip, docker, etc. For full details, see: https://jupyterlab.readthedocs.io/en/stable/getting_started/installation.html . To use conda to install jupyerlab, run the terminal command: . conda install -c conda-forge jupyterlab . To verify the installation, run the command: . (base) [$USER@comet-ln2:~] which jupyter-labextension ~/miniconda3/bin/jupyter-labextension . ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/prerequisites/#install-jupyterlab",
    "relUrl": "/docs/notebooks-101/prerequisites/#install-jupyterlab"
  },"62": {
    "doc": "Software Prerequisites",
    "title": "Other Python Packages**",
    "content": "Any other Python packages you need to run your notebook should be installed with Conda. You can install python packages in a conda environment while your notebook is running. This is useful if you forgot a package, you won’t have to worry about cancelling and restarting your job before installing. However, it is recommended that you install all required packages beforehand to save yourself valuable compute time. ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/prerequisites/#other-python-packages",
    "relUrl": "/docs/notebooks-101/prerequisites/#other-python-packages"
  },"63": {
    "doc": "Software Prerequisites",
    "title": "Setup a Conda Virtual Environment",
    "content": "Choose whatever name you want - it should reflect the application/project you are working on. $ conda create --name example_env . To see which virtual environments you’ve created . $ conda env list . To use a particular virtual environment (e.g., one named ‘example_env’): $ source activate example_env # Note: don’t use ‘conda activate’ . To see which versions of a package are available . (example_env) $ conda search package_name This searches for packages from the default “channel.” Other channels might have newer versions available. For instance, we’ve seen more recent versions of the ‘yt’ package in the channel named “conda-forge”. To install from a different channel, use something like: (example_env) $ conda search -c conda-forge yt . To install packages in an active virtual environment . (example_env) $ conda install package_name # e.g, like ‘yt’ As with the package search, you can install from a different channel using a ‘-c channel_name’ flag, e.g.: (example_env) $ conda install -c conda-forge yt . To update a package to a newer version . (example_env) $ conda update package_name Like install and search, this command can take a ‘-c channel-name’ flag if you want to update to newer versions than are in the default channel. To start a Python interpreter with access to the installed packages: . (example_env) $ python # python3 works as well . To stop using the current virtual environment: . (example_env) $ source deactivate . To delete an inactive virtual environment: . $ conda env remove --name example_env . ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/prerequisites/#setup-a-conda-virtual-environment",
    "relUrl": "/docs/notebooks-101/prerequisites/#setup-a-conda-virtual-environment"
  },"64": {
    "doc": "Software Prerequisites",
    "title": "Install JupyterNotebooks and Jupyterlab",
    "content": "You’ll need to install jupyter using conda install jupyter. More info here. If you want to use Jupyterlab, install that. ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/prerequisites/#install-jupyternotebooks-and-jupyterlab",
    "relUrl": "/docs/notebooks-101/prerequisites/#install-jupyternotebooks-and-jupyterlab"
  },"65": {
    "doc": "Software Prerequisites",
    "title": "Other Python Packages",
    "content": "Any other Python packages you need to run your notebook should be installed with Conda. You can install python packages in a conda environment while your notebook is running. This is useful if you forgot a package, you won’t have to worry about cancelling and restarting your job before installing. However, it is recommended that you install all required packages beforehand to save yourself valuable compute time. ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/prerequisites/#other-python-packages-1",
    "relUrl": "/docs/notebooks-101/prerequisites/#other-python-packages-1"
  },"66": {
    "doc": "Software Prerequisites",
    "title": "Download Example Notebooks",
    "content": "For these examples, you should have some simple notebooks loaded into your comet directory for testing. You can clone the notebooks examples repository: To clone the repo, log onto comet, cd into the directory where you want to work, and type: . git clone https://github.com/sdsc-hpc-training-org/notebook-examples.git . ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/prerequisites/#download-example-notebooks",
    "relUrl": "/docs/notebooks-101/prerequisites/#download-example-notebooks"
  },"67": {
    "doc": "Software Prerequisites",
    "title": "Basic HPC Skills",
    "content": "If you are a beginner, or need to brush up on some basic skills needed to run jobs on HPC systems, check out our repo: . Basic Skill . To clone the repo, log onto comet, cd into the directory where you want to work, and type: . git clone https://github.com/sdsc-hpc-training-org/basic_skills.git . ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/prerequisites/#basic-hpc-skills",
    "relUrl": "/docs/notebooks-101/prerequisites/#basic-hpc-skills"
  },"68": {
    "doc": "Software Prerequisites",
    "title": "Software Prerequisites",
    "content": "# . Running Juypter notebooks relies on you handling your own python jupyter package installation. Typically, users install Anaconda on local systems. Anaconda is a common package manager used for data science, but it it not recommended for use on HPC systems and running jupyter notebooks remotely. Anaconda is a large package and has a lot of overhead. For best performance, we recommend using Miniconda. Miniconda is a free minimal installer for conda. It is a small, bootstrap version of Anaconda that includes only conda, Python, the packages they depend on, and a small number of other useful packages. If you’re not familiar with Anaconda, check it out here. ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/prerequisites/",
    "relUrl": "/docs/notebooks-101/prerequisites/"
  },"69": {
    "doc": "Security with Reverse Proxy Service",
    "title": "Security with Reverse Proxy Service",
    "content": ". | Connection to Notebook over HTTPS using the Reverse Proxy Service (very secure) | . Overview . The SDSC Reverse Proxy Service is a prototype system that will allow users to launch standard Jupyter Services on on any Comet compute node using a reverse proxy server using a simple bash script called start-jupyter. The notebooks will be hosted on the internal cluster network as an HTTP service using standard jupyter commands. The service will then be made available to the user outside of the cluster firewall as an HTTPS connection between the external users web browser and the reverse proxy server. The goal is to minimize software changes for our users while improving the security of user notebooks running on our HPC systems. The RPS service is capable of running on any HPC system capable of supporting the RP server (needs Apache). Using the RPS is very simple and requires no tunneling and is secure (produces HTTPS URLs). To use RPS, SSH to connect to comet, and make sure that you have the software environment installed on the login node. Verify that you have installed the required software: Anaconda, conda, Jupyter (notebooks, lab), and other Python packages needed for you application. Clone the RPS repository . Clone this repository directly into your comet login node. git clone https://github.com/sdsc-hpc-training-org/reverse-proxy.git . Launching the Notebook . The start-jupyter script performs the following tasks: . | Sends a request to the reverse proxy server (RPS) to get a one-time token and a port number | Launches the jupyter notebook command using the token and port number. | Prints a secure URL containing the token to the terminal, so that the user can copy/paste the URL into a local browser: Your notebook is here: https://aversion-runaround-spearman.comet-user-content.sdsc.edu?token=099aa825b1403d58889842ab2c758885 . | . Usage ./start-jupyter [-p &lt;string&gt;] [-d &lt;string&gt;] [-A &lt;string&gt;] [-b &lt;string&gt;] [-t time] [-i] . -p: the partition to wait for. debug or compute Default Partition is \"compute\" -d: the top-level directory of your jupyter notebook Default Dir is /home/$USER -A: the project allocation to be used for this notebook Default Allocation is your sbatch system default allocation (also called project or group) -b: the batch script you want to submit with your notebook. Only those in the `batch` folder are supported. Default batch script is ./batch/batch_notebook.sh -t: the time to run the notebook. Your account will be charged for the time you put here so be careful. Default time is 30 minutes -i: Get extra information about the job you submitted using the script . (If you don’t know what $USER is, try this command: echo $USER. This is just your comet username) . Note that the time positional argument must occur after all the flags. There will be an error if you put any flags after the positional argument. NOTE: Using the script on multiple systems . There are minor differences when using the script on Comet vs. Stratus vs. TSCC. TSCC uses a queue system called Torque, whereas Comet and Stratus use Slurm. You will see example notebook and jupyterlab scripts for Torque and Slurm in the RPS repository. The most important thing to notice is that when you run start-jupyter it will automatially run with defaults for the cluster you are using. So you don’t need to worry as much about which cluster you’re on. Example Commands . Start a notebook with all defaults on any system ./start-jupyter . Start a jupyterlab session with rest defaults on Comet ./start-jupyter -b slurm/jupyterlab.sh . Start a jupyterlab session with rest defaults on TSCC ./start-jupyter -b torque/jupyterlab.sh . Start a notebook in the debug queue on Comet only ./start-jupyter -d ~ -p debug -t 30 . Start a notebook in the compute queue on Comet only ./start-jupyter -d ~ -A ddp363 -p compute -t 60 . Example Output . This is your waiting screen. This screen occurs before your batch job is submitted. Your notebook is ready to go! . If you refresh too soon, you may see this page. This is expected and you’ll just have to wait. ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/reverseProxy/",
    "relUrl": "/docs/notebooks-101/reverseProxy/"
  },"70": {
    "doc": "Jupyter Services on Comet",
    "title": "Jupyter Services on Comet",
    "content": "Overview of this section You can access a jupyter notebook directly from your browser after starting it on the login node. This method is insecure, and will result in a notebook served over http, which is not something you want to be using on a regular basis. ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/runJupyterMethods/",
    "relUrl": "/docs/notebooks-101/runJupyterMethods/"
  },"71": {
    "doc": "Jupyter Services on Comet",
    "title": "Access the node in your browser",
    "content": "Copy the the URL above into the browser running on your laptop. Use your jupyterlab/jupyter notebook server! . Enjoy. Note that your notebook is unsecured. ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/runJupyterMethods/#access-the-node-in-your-browser",
    "relUrl": "/docs/notebooks-101/runJupyterMethods/#access-the-node-in-your-browser"
  },"72": {
    "doc": "Using Slurm on Comet",
    "title": "Running Jobs on Expanse ",
    "content": "Expanse manages computational work via the Simple Linux Utility for Resource Management (SLURM) batch environment. Expanse places limits on the number of jobs queued and running on a per group (allocation) and partition basis. Submitting a large number of jobs (especially very short ones) can impact the overall scheduler response for all users. If you are anticipating submitting a lot of jobs, contact the SDSC consulting staff before you submit them. We can work to check if there are bundling options that make your workflow more efficient and reduce the impact on the scheduler . For more details, see the section on Running job in the Expanse User Guide: http://www.sdsc.edu/support/user_guides/expanse.html#running . The Simple Linux Utility for Resource Management (SLURM) . | “Glue” for parallel computer to schedule and execute jobs | Role: Allocate resources within a cluster | Nodes (unique IP address) | Interconnect/switches | Generic resources (e.g. GPUs) | Launch and otherwise manage jobs . | Functionality: | Prioritize queue(s) of jobs; | decide when and where to start jobs; | terminate job when done; | Appropriate resources; | Manage accounts for jobs . | All jobs must be run via the Slurm scheduling infrastructure. There are two types of jobs: | Interactive Jobs | Batch Jobs | . Back to Top . Interactive Jobs: . Interactive HPC systems allow real-time user inputs in order to facilitate code development, real-time data exploration, and visualizations. An interactive job (also referred as interactive session) will provide you with a shell on a compute node in which you can launch your jobs. On Expanse, use the srun command: . srun --pty --nodes=1 --ntasks-per-node=24 -p debug -t 00:30:00 --wait 0 /bin/bash . For more information, see the interactive computing tutorial here. Batch Jobs using SLURM: . When you run in the batch mode, you submit jobs to be run on the compute nodes using the sbatch command (described below). Batch scripts are submitted from the login nodes. You can set environment variables in the shell or in the batch script, including: . | Partition (also called the qeueing system) | Time limit for a job (maximum of 48 hours; longer on request) | Number of nodes, tasks per node | Memory requirements (if any) | Job name, output file location | Email info, configuration | . Below is an example of a basic batch script, which shows key features including naming the job/output file, selecting the SLURM queue partition, defining the number of nodes and ocres, and the length of time that the job will need: . [mthomas@expanse-ln3 IBRUN]$ cat hellompi-slurm.sb #!/bin/bash #SBATCH --job-name=\"hellompi\" #SBATCH --output=\"hellompi.%j.%N.out\" #SBATCH --partition=compute #SBATCH --nodes=2 #SBATCH --ntasks-per-node=24 #SBATCH --export=ALL #SBATCH -t 00:30:00 #Define user environment source /etc/profile.d/modules.sh module purge module load intel module load mvapich2_ib #This job runs with 2 nodes, 24 cores per node for a total of 48 cores. #ibrun in verbose mode will give binding detail ibrun -v ../hello_mpi . Note that we have included configuring the user environment by purging and then loading the necessary modules. While not required, it is a good habit to develop when building batch scripts. Back to Top . Slurm Partitions . Expanse places limits on the number of jobs queued and running on a per group (allocation) and partition basis. Please note that submitting a large number of jobs (especially very short ones) can impact the overall scheduler response for all users. Specified using -p option in batch script. For example: . #SBATCH -p gpu . Back to Top . Slurm Commands: . Here are a few key Slurm commands. For more information, run the man slurm or see this page: . | To Submit jobs using the sbatch command: | . $ sbatch Localscratch-slurm.sb  Submitted batch job 8718049 . | To check job status using the squeue command: $ squeue -u $USER              JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)                         8718049   compute localscr mahidhar PD       0:00      1 (Priority)                                                 * Once the job is running, you will see the job status change:                                                 $ squeue -u $USER                                      JOBID PARTITION     NAME     USER ST       TIME  NODES NODELIST(REASON)                                                 8718064     debug localscr mahidhar  R       0:02      1 expanse-14-01                                                                                                 * To cancel a job, use the scancel along with the JOBID:                                                 * $scancel                                                                                                 ### Command Line Jobs                                                 The login nodes are meant for compilation, file editing, simple data analysis, and other tasks that use minimal compute resources. Do not run parallel or large jobs on the login nodes - even for simple tests. Even if you could run a simple test on the command line on the login node, full tests should not be run on the login node because the performance will be adversely impacted by all the other tasks and login activities of the other users who are logged onto the same node. For example, at the moment that this note was written, a `gzip` process was consuming 98% of the CPU time:                                                 ```                                                 [mthomas@expanse-ln3 OPENMP]$ top                                                 ...                                                 PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND                                                 19937 XXXXX 20 0 4304 680 300 R 98.2 0.0 0:19.45 gzip                                                 ```                                                                                                 Commands that you type into the terminal and run on the sytem are considered *jobs* and they consume resources. Computationally intensive jobs should be run only on the compute nodes and not the login nodes.                                                                                                 [Back to Top](#top)                                                 &lt;hr&gt; | . ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/slurm/#running-jobs-on-expanse-",
    "relUrl": "/docs/expanse-101/slurm/#running-jobs-on-expanse-"
  },"73": {
    "doc": "Using Slurm on Comet",
    "title": "Using Slurm on Comet",
    "content": " ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/slurm/",
    "relUrl": "/docs/expanse-101/slurm/"
  },"74": {
    "doc": "Getting Started on Expanse",
    "title": "Getting Started on Expanse",
    "content": "Expanse Accounts . You must have a expanse account in order to access the system. | Obtain a trial account here: http://www.sdsc.edu/support/user_guides/expanse.html#trial_accounts | You can use your XSEDE account. | . Logging Onto Expanse . Details about how to access Expanse under different circumstances are described in the Expanse User Guide: http://www.sdsc.edu/support/user_guides/expanse.html#access . For instructions on how to use SSH, see here . [mthomas@gidget:~] ssh -Y expanse.sdsc.edu Password: Last login: Fri Jul 31 14:20:40 2020 from 76.176.117.51 Rocks 7.0 (Manzanita) Profile built 12:32 03-Dec-2019 Kickstarted 13:47 03-Dec-2019 WELCOME TO __________________ __ _______________ -----/ ____/ __ \\/ |/ / ____/_ __/ --/ / / / / / /|_/ / __/ / / / /___/ /_/ / / / / /___ / / \\____/\\____/_/ /_/_____/ /_/ ############################################################################### NOTICE: The Expanse login nodes are not to be used for running processing tasks. This includes running Jupyter notebooks and the like. All processing jobs should be submitted as jobs to the batch scheduler. If you don’t know how to do that see the Expanse user guide https://www.sdsc.edu/support/user_guides/expanse.html#running. Any tasks found running on the login nodes in violation of this policy may be terminated immediately and the responsible user locked out of the system until they contact user services. ############################################################################### (base) [mthomas@expanse-ln2:~] . Back to Top . Obtaining Example Code . | Create a test directory hold the expanse example files: [expanse-ln2 ~]$ mkdir expanse-examples [expanse-ln2 ~]$ ls -al total 166 drwxr-x--- 8 user user300 24 Jul 17 20:20 . drwxr-xr-x 139 root root 0 Jul 17 20:17 .. -rw-r--r-- 1 user use300 2487 Jun 23 2017 .alias -rw------- 1 user use300 14247 Jul 17 12:11 .bash_history -rw-r--r-- 1 user use300 18 Jun 19 2017 .bash_logout -rw-r--r-- 1 user use300 176 Jun 19 2017 .bash_profile -rw-r--r-- 1 user use300 159 Jul 17 18:24 .bashrc drwxr-xr-x 2 user use300 2 Jul 17 20:20 expanse-examples [snip extra lines] [expanse-ln2 ~]$ cd expanse-examples/ [expanse-ln2 expanse-examples]$ pwd /home/user/expanse-examples [expanse-ln2 expanse-examples]$ . | Copy the /share/apps/examples/expanse101/ directory to your local (/home/username/expanse-examples) directory. Note: you can learn to create and modify directories as part of the Getting Started and Basic Skills preparation work: https://github.com/sdsc/sdsc-summer-institute-2020/tree/master/0_preparation [mthomas@expanse-ln3 ~]$ ls -al /share/apps/examples/hpc-training/expanse-examples/ total 20 (base) [mthomas@expanse-ln2:~/expanse101] ll /share/apps/examples/hpc-training/expanse101/ total 32 drwxr-sr-x 8 mthomas use300 4096 Apr 16 10:39 . drwxrwsr-x 4 mahidhar use300 4096 Apr 15 23:37 .. drwxr-sr-x 5 mthomas use300 4096 Apr 16 03:30 CUDA drwxr-sr-x 2 mthomas use300 4096 Apr 16 10:39 HYBRID drwxr-sr-x 2 mthomas use300 4096 Apr 16 10:39 jupyter_notebooks drwxr-sr-x 2 mthomas use300 4096 Apr 16 16:46 MKL drwxr-sr-x 4 mthomas use300 4096 Apr 16 03:30 MPI drwxr-sr-x 2 mthomas use300 4096 Apr 16 03:31 OPENMP . Copy the ‘expanse101’ directory into your expanse-examples directory: . [mthomas@expanse-ln3 ~]$ [mthomas@expanse-ln3 ~]$ cp -r /share/apps/examples/expanse101/ expanse-examples/ [mthomas@expanse-ln3 ~]$ ls -al expanse-examples/ total 105 drwxr-xr-x 5 username use300 6 Aug 5 19:02 . drwxr-x--- 10 username use300 27 Aug 5 17:59 .. drwxr-xr-x 16 username use300 16 Aug 5 19:02 expanse101 [mthomas@expanse-ln3 expanse-examples]$ ls -al total 132 total 170 drwxr-xr-x 8 mthomas use300 8 Aug 3 01:19 . drwxr-x--- 64 mthomas use300 98 Aug 3 01:19 .. drwxr-xr-x 5 mthomas use300 5 Aug 3 01:19 CUDA drwxr-xr-x 2 mthomas use300 6 Aug 3 01:19 HYBRID drwxr-xr-x 2 mthomas use300 3 Aug 3 01:19 jupyter_notebooks drwxr-xr-x 2 mthomas use300 6 Aug 3 01:19 MKL drwxr-xr-x 4 mthomas use300 9 Aug 3 01:19 MPI drwxr-xr-x 2 mthomas use300 9 Aug 3 01:19 OPENMP . Most examples will contain source code, along with a batch script example so you can run the example, and compilation examples (e.g. see the MKL example). | . Back to Top . ",
    "url": "http://localhost:4000/dev.io/docs/expanse-101/start/",
    "relUrl": "/docs/expanse-101/start/"
  },"75": {
    "doc": "Security with SSH Tunneling",
    "title": "Security with SSH Tunneling",
    "content": "Connection to Notebook over SSH tunneling (secure) . This section shows you how to launch a Jupyter Notebook using an interactive node or on a compute node, and to use ssh tunneling to securely connect to the notebook server. Interactive Node Method . Open two terminals on your computer . We will use one terminal to start the notebook, and the other to establish the tunnel. Pick the first terminal, call it T1. SSH into comet from your local computer: . In T1, ssh user@comet.sdsc.edu. This is just a regular SSH login. Claim an interactive node . In T1, srun --partition=debug --pty --nodes=1 --ntasks-per-node=24 -t 00:30:00 --wait=0 --export=ALL /bin/bash . Source: Comet User Guide . Feel free to adjust the parameters, but remember that in the debug partition you can only claim a node for up to 30 minutes. You can use other queues, but you may have to wait longer. Take note of the &lt;node name&gt; of the interactive node. Start a jupyter notebook server on the interactive node. In T1, run the command jupyter notebook --no-browser . The no browser option is required, otherwise the program may think you want a text representation of your outputs in the terminal, which trust me - you don’t want. You can also specify a port number if you wish using the --port 1234 option. Note the value of the &lt;jupyter port&gt; number returned by the command. Create SSH Tunnel Connection . In the next command, you will create an ssh connection between your local host and the notebook port on the remote, interactive node. When you connect your browser to the notebook service, this will channel all communications via the SSH connection, which is secure and encrypted. In the second terminal, call it T2, run the command . ssh -L 8888:127.0.0.1:&lt;jupyter port&gt; user@comet-14-01.sdsc.edu Replace comet-14-01 with the name of the compute node. You can view the compute node in T1 prompt. Replace the &lt;jupyter port&gt; with the port the jupyter notebook started on after running the jupyter notebook --no-browser command in window T1. The default jupyter port number is 8888, but don’t worry if its different. This establishes a tunnel between port 8888 on your computer and the jupyter port on the compute node . Visit the port in your local browser . In any browser, type in 127.0.0.1:8888 and you should get your notebook. You’ll have to input the jupyter token available in your terminal. If for some reason that address doesn’t work, check the output of the terminal. You could try using the address localhost:8888 or 0.0.0.0:8888. The reason tunneling is generally not the prefered method is because it is complicated and the port numbers sometimes are not available by the time you access the service. And, you can’t know the port the jupyter notebook is going end up open on until you start it on the node, and you need to tunnel through that port… which is why we need two terminals in this example. Compute Node Method . In this example, we use a batch script to obtain a compute node, and to launch a jupyter lab or notebook. You can access the jupyter service directly from your browser once it has started running on the comet node. This method uses the SSH Tunneling method described above to make a secure SSH connection between your laptop and the Jupyter services. First, log onto comet using SSH. Copy the batch script example . #!/usr/bin/env bash #SBATCH --job-name=tensorflow-compute #SBATCH --partition=compute #SBATCH --time=00:30:00 #SBATCH --nodes=1 #SBATCH --ntasks-per-node=24 #SBATCH --output=tensorflow-compute.o%j.%N module purge module list printenv time -p singularity exec /share/apps/compute/singularity/images/tensorflow/tensorflow-cpu.simg jupyter lab --no-browser --ip=\"$(hostname)\" . This example uses the tensorflow singularity container available on comet. You can use any container you want. If you check out /share/apps/computer/singularity you can find many useful containers. The key part of this example is how the jupyter lab is started at the end - jupyter lab --no-browser --ip \"${hostname}\". Submit this script to the queue . Simply run sbatch run-jupyter-tensorflow-compute.sh One thing you may want to do is change the script to be --partition=debug if you want a shorter wait time. Access the node in your browser . First, wait for the job to be submitted to the queue. Then, monitor the output file created by your batch job, which looks something like tensorflow-compute.o%j.%N if you used the example. Inside this file, you will see the output of the jupyterlab command. There, you should be able to see the port the jupyterlab server is running on, as well as the token you will need to login. My recommendation would be to just memorize the port number and copy the jupyter token. The port is almost always 8888 so it shouldn’t be that hard to remember. You will also need to know the comet node you are logged in on. You can view this by typing this command: squeue -u $USER. Under the NODELIST section you can see the comet node. Open up a new tab in your browser, and type in the following: http://comet-xx-xx.sdsc.edu:PPPP where comet-xx-xx is the comet node, PPPP is the port number (usually 8888). The jupyter notebook page should show up, and you can now paste in the token from the output file. Use your jupyterlab/jupyter notebook server! . Enjoy. Note that your notebook connection is secured and encrypted. ",
    "url": "http://localhost:4000/dev.io/docs/notebooks-101/tunneling/",
    "relUrl": "/docs/notebooks-101/tunneling/"
  }
}
